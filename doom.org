:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+PROPERTY: header-args:emacs-lisp :tangle config.el
# Just silent the output. Ref: https://orgmode.org/manual/Results-of-Evaluation.html
#+PROPERTY: header-args :mkdirp yes :comments no :results output silent
# Manually set auto tangle for this file
#+AUTO_TANGLE: t
#+STARTUP: fold
:END:

# To increase text size in generated html
# Ref: https://www.w3schools.com/cssref/pr_font_font-size.asp
# Ref: https://stackoverflow.com/questions/51415911/emacs-org-mode-how-to-choose-font-when-exporting-to-html
# +HTML_HEAD_EXTRA: <style>*{font-family: serif !important}</style>
# +HTML_HEAD_EXTRA: <style>*{font-size: medium !important}</style>
# +HTML_HEAD_EXTRA: <style>*{font-family: 'Iosevka Aile Web', sans-serif; font-weight: 300; font-size: 1.3rem;}</style>

# Ref: https://olmon.gitlab.io/org-themes/
# +SETUPFILE: ../thirdp/org-themes/src/white_clean/white_clean.theme
#+SETUPFILE: ../thirdp/org-themes/src/readtheorg_inline/readtheorg_inline.theme
# +SETUPFILE: ../thirdp/org-themes/src/simple_inline/simple_inline.theme

# These default from org-html-themes
# +SETUPFILE: ../thirdp/org-html-themes/org/theme-readtheorg-local.setup
# +SETUPFILE: ../thirdp/org-html-themes/org/theme-bigblow-local.setup
# Then copy the "src" folder from the org-html-themes folder into
# the same folder as the file you want to export
# cp -R ../thridp/org-html-themes/src bo/

#+EXPORT_FILE_NAME: bo/doom
# the exported filename will be bo/doom.html, bo/doom.tex or bo/doom.pdf (relateve to doom.org)
# This is to set the number of headline levels to use for export
#+OPTIONS: H:5
# This is to set the headlines that will be numbered
#       #+OPTIONS: num:nil

#+title: Dot Doom Emacs
#+author: Totok Sulistiomono
#+email: s.totok@gmail.com

This is my Doom Emacs configuration, originally forked from [[https://github.com/zzamboni/dot-doom][zzamboni/dot-doom.git]].

* Table of Contents :TOC_3:noexport:
- [[#doom-config-files][Doom Config Files]]
  - [[#config-file-headers][Config file headers]]
    - [[#header-for-initel][Header for =init.el=]]
    - [[#header-for-packagesel][Header for =packages.el=]]
    - [[#header-for-configel][Header for =config.el=]]
  - [[#customized-variables][Customized variables]]
- [[#doom-modules][Doom Modules]]
  - [[#modules][Modules]]
  - [[#disabling-packages][Disabling Packages]]
  - [[#need-to-have-packages][Need to Have Packages]]
- [[#general-configuration][General Configuration]]
  - [[#doom-local-leader-key][Doom Local Leader Key]]
  - [[#better-defaults][Better Defaults]]
  - [[#mac-modifiers][Mac Modifiers]]
  - [[#frame-title][Frame Title]]
  - [[#persist-frame-geometry][Persist Frame Geometry]]
  - [[#scratch-buffer][Scratch Buffer]]
    - [[#doom-scratch-buffer][Doom Scratch Buffer]]
    - [[#emacs-scratch-buffer][Emacs Scratch Buffer]]
  - [[#dashboard][Dashboard]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
  - [[#line-settings][Line settings]]
  - [[#pulsing-cursor][Pulsing Cursor]]
  - [[#rainbow-mode][Rainbow mode]]
    - [[#tools-rgb][=:tools rgb=]]
    - [[#manual-package-installation][Manual package installation]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#modeline][Modeline]]
    - [[#doom-modeline][doom-modeline]]
    - [[#which-function-mode][which-function-mode]]
    - [[#show-current-time][Show current time]]
  - [[#indent-guide][Indent guide]]
  - [[#shrink-whitespace][Shrink Whitespace]]
  - [[#registers][Registers]]
  - [[#undo][undo]]
  - [[#key-bindings][Key bindings]]
    - [[#first-this-is-for-one-of-my-laptop-keyboard][First, this is for one of my laptop keyboard]]
    - [[#emulating-vis--key][Emulating vi's =%= key]]
- [[#personal-info-and-gpg][Personal Info and GPG]]
  - [[#first-installation-and-key-pair-generation][First: Installation and Key-Pair Generation]]
  - [[#second-create-a-file-you-want-to-encrypt][Second: Create a file you want to encrypt]]
  - [[#third-emacs-configuration][Third: Emacs configuration]]
- [[#tree-sitter][Tree-Sitter]]
  - [[#use-emacs-tree-sitter-for-hightlighting-in-doom-emacs][Use Emacs-Tree-Sitter for Hightlighting in Doom Emacs]]
- [[#evil][Evil]]
  - [[#general][General]]
  - [[#move-around][Move Around]]
    - [[#vertical-movement][Vertical Movement]]
    - [[#horizontal-movement][Horizontal Movement]]
    - [[#arbitrary-movement][Arbitrary Movement]]
  - [[#evil-mc][evil-mc]]
    - [[#incompatibility][Incompatibility]]
    - [[#hydra][Hydra]]
    - [[#working-with-smartparens][Working With Smartparens]]
  - [[#evil-escape][Evil Escape]]
  - [[#evil-motion-trainer][Evil Motion Trainer]]
  - [[#evil-visualstar][Evil Visualstar]]
  - [[#evil-exchange][Evil Exchange]]
  - [[#reference][Reference]]
- [[#abo-abo][abo-abo]]
  - [[#avy][avy]]
    - [[#avy-goto-line][avy-goto-line]]
    - [[#avy-can-do-anything][Avy Can Do Anything]]
    - [[#avy-actions-are-awesome][Avy Actions are Awesome!]]
  - [[#ivy][ivy]]
- [[#vertico--co][Vertico & Co]]
  - [[#project-wide-search-and-replace][Project-wide Search and Replace]]
  - [[#orderless-completion-in-lsp-mode][Orderless completion in lsp-mode]]
- [[#org][Org]]
  - [[#general-org-configuration][General Org Configuration]]
  - [[#org-visual-settings][Org visual settings]]
  - [[#org-roam][Org Roam]]
    - [[#configuration][Configuration]]
    - [[#front-end][Front end]]
  - [[#exporting-a-curriculum-vitae][Exporting a Curriculum Vitae]]
  - [[#revealjs-presentations][Reveal.js presentations]]
  - [[#org-tree-slide][Org-tree-slide]]
  - [[#publishing-project][Publishing Project]]
  - [[#organizing-a-book-in-org-mode][Organizing A Book In Org Mode]]
  - [[#anki-decks-with-orgmode][Anki Decks with Orgmode]]
  - [[#the-orgtbl-minor-mode][The Orgtbl Minor mode]]
  - [[#tableel][Table.el]]
- [[#coding][Coding]]
  - [[#tangle-on-save][Tangle-on-save]]
- [[#template][Template]]
  - [[#file-template][File Template]]
- [[#cc][C/C++]]
- [[#tagging][Tagging]]
  - [[#cscope][Cscope]]
  - [[#citre][Citre]]
- [[#python][Python]]
  - [[#pipenv][pipenv]]
    - [[#python-launcher][Python Launcher]]
    - [[#python-user-base-directory][Python User Base Directory]]
    - [[#install][Install]]
    - [[#bashrc][.bashrc]]
    - [[#windows-environment-variable][windows environment variable]]
    - [[#createactivate-virtual-environment][Create/Activate virtual environment]]
- [[#magit][Magit]]
  - [[#magit-and-gerrit][Magit and Gerrit]]
  - [[#blame][Blame]]
  - [[#blamer][Blamer]]
  - [[#forge][Forge]]
    - [[#how-to-merge-pull-request][How to Merge Pull Request]]
  - [[#code-review][Code Review]]
  - [[#github-development-model][Github Development Model]]
    - [[#add-collaborators][Add Collaborators]]
    - [[#managing-a-branch-protection-rule][Managing a branch protection rule]]
    - [[#workflow][Workflow]]
- [[#project-management][Project Management]]
  - [[#projectel][project.el]]
    - [[#overriding-the-projectel-project-directory][Overriding the project.el project directory]]
  - [[#projectile][Projectile]]
    - [[#customization][Customization]]
    - [[#keeping-projectiles-cache-tidy][Keeping Projectile's Cache Tidy]]
  - [[#bookmark-in-project][Bookmark in Project]]
- [[#remote-file-editing][Remote File Editing]]
  - [[#using-local-emacs-from-a-remote-host][Using Local Emacs from a Remote Host]]
  - [[#tramp][Tramp]]
- [[#plantuml][Plantuml]]
  - [[#need-dot-utility-from-graphviz-package][Need =dot= utility from =graphviz= package]]
  - [[#plantuml-mode][=plantuml-mode=]]
  - [[#if-youd-like-to-edit-dot-file-directly][If you'd like to edit =dot file= directly]]
- [[#treemacs][Treemacs]]
  - [[#treemacs-projectile][treemacs-projectile]]
  - [[#lsp-treemacs][=lsp-treemacs=]]
- [[#language-server-protocol][Language Server Protocol]]
  - [[#lsp][LSP]]
    - [[#configuration-1][Configuration]]
    - [[#keybindings][Keybindings]]
- [[#company][Company]]
- [[#spell-checker][Spell Checker]]
- [[#calendar-and-world-clock][Calendar and World Clock]]
  - [[#calendar][Calendar]]
  - [[#localized-holidays][Localized Holidays]]
  - [[#world-clock][World Clock]]
- [[#other-modes][Other Modes]]
  - [[#qml-qt-declarative][QML (QT Declarative)]]
  - [[#csv-mode][CSV mode]]
  - [[#json-mode][JSON mode]]
  - [[#cmake-mode][CMake mode]]
  - [[#makefile-mode][Makefile mode]]
- [[#calculator][Calculator]]
  - [[#keybinding][Keybinding]]
  - [[#trail-commands][Trail Commands]]
  - [[#digit-grouping][Digit Grouping]]
  - [[#calc-mode-epiphany][Calc-Mode Epiphany]]
  - [[#convert-decimalhexadecimalbinary][Convert Decimal/Hexadecimal/Binary]]
  - [[#binary-number-operation][Binary Number Operation]]
  - [[#hms][HMS]]
    - [[#convert-minute-to-hhmmss][Convert Minute to HH:MM:SS]]
    - [[#convert-hhmmss-to-minute][Convert HH:MM:SS to Minute]]
- [[#casual---opinioted-procelain-for-emacs-calc-dired-and-others][Casual - Opinioted procelain for emacs calc, dired and others]]
- [[#tools][Tools]]
  - [[#docker][docker]]
  - [[#copy-full-path-of-current-buffer][Copy full path of current buffer]]
  - [[#insert-date-at-cursor][Insert date at cursor]]
  - [[#show-ascii-table][Show ascii table]]
  - [[#arrayify][Arrayify]]
  - [[#dwim-shell-command][dwim-shell-command]]
- [[#how-to][How To]]
  - [[#directory-editor-with-dired][Directory Editor with Dired]]
  - [[#expand-region][Expand region]]
    - [[#key-binding][Key binding]]
  - [[#map-unmap-keybinding][Map Unmap keybinding]]
  - [[#what-is-my-xxx][What is my xxx]]
- [[#references][References]]
  - [[#todo-to-install-later][TODO: To Install Later]]
  - [[#general-emacs][General Emacs]]
  - [[#doom-emacs][Doom Emacs]]
  - [[#org-mode][Org-mode]]
  - [[#keybindings-1][Keybindings]]
  - [[#pipenv-1][=pipenv=]]
  - [[#latex-and-tikz][Latex and Tikz]]
  - [[#everything-else][Everything Else]]
  - [[#ai][AI]]
- [[#practice][Practice]]
  - [[#delete-n-lines-including-current-line][Delete n lines including current line]]
    - [[#with-avy][With avy]]
    - [[#with-evilmotion][With evilmotion]]
  - [[#delete-n-block-of-chars][Delete n block of chars]]
    - [[#with-avy-1][With avy]]
    - [[#with-evil-snipe][With evil-snipe]]
  - [[#uncommenting][(Un)commenting]]
    - [[#select-comment][Select comment]]
  - [[#evil-multiedit][Evil-multiedit]]
  - [[#narrowing][Narrowing]]
  - [[#copy-and-comment-lines][Copy and comment lines]]
  - [[#search-with-ripgrep][Search with ripgrep]]
    - [[#live-project-search-from-the-project-root-using-ripgrep][Live project search from the project root using ripgrep]]
    - [[#grep-for-a-string-in-the-current-directory-using-ripgrep][Grep for a string in the current directory using ripgrep]]
    - [[#search-the-current-project-with-ripgrep][Search the current project with ripgrep]]
  - [[#break-a-long-line-into-shorther-lines][Break a long line into shorther lines]]
  - [[#macros][Macros]]
    - [[#exercise-1][Exercise 1]]
    - [[#exercise-2][Exercise 2]]

* Doom Config Files

Doom Emacs uses three config files which are generated from this Org file (=doom.org=):

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is
  a bundle of packages, configuration and commands, organized into a unit that can
  be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are
  installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but theses are the main ones. The load
order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.

** Config file headers

We start by simply defining the standard headers used by the three files. These headers
come from the initial files generated by =doom install=, and contain either some Emacs-LISP
relevant indicators like =lexical-binding=, or instructions about the contents of the file.

*** Header for =init.el=

#+begin_src emacs-lisp :tangle init.el
;;; $DOOMDIR/init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

*** Header for =packages.el=

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

*** Header for =config.el=

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Well, macros to check system-name.
(defconst IS-IGL7568W (string-prefix-p "IGL7568W" (system-name) t))
(defconst IS-IGD1943U (string-prefix-p "igd1943u" (system-name) t))
(defconst IS-IGD0464U (string-prefix-p "igd0464u" (system-name) t))
(defconst IS-OMICRON  (string-prefix-p "omicron"  (system-name) t))
(defconst IS-COVID    (string-prefix-p "covid"    (system-name) t))
(defconst IS-ERIS     (string-prefix-p "eris"     (system-name) t))
(defconst IS-VDI1039  (string-prefix-p "igvmf02d1039vdi" (system-name) t))
(defconst IS-HORUS    (string-prefix-p "horus"    (system-name) t))
(defconst IS-DEDUN    (string-prefix-p "dedun"    (system-name) t))
;; print hostname
(cond
 (IS-IGL7568W
  (message "hostname: IGL7568W"))
 (IS-IGD1943U
  (message "hostname: igd1943u"))
 (IS-IGD0464U
  (message "hostname: igd0464u"))
 (IS-OMICRON
  (message "hostname: omicron"))
 (IS-COVID
  (message "hostname: covid"))
 (IS-ERIS
  (message "hostname: eris"))
 (IS-VDI1039
  (message "hostname: igvmf02d1039vdi"))
 (IS-HORUS
  (message "hostname: horus"))
 (IS-DEDUN
  (message "hostname: dedun"))
 (t
  (message "hostname: unknown")))
#+end_src

** Customized variables

Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][does not recommend the Emacs =customize= mechanism]]:

#+begin_quote
/Note: do not use M-x customize or the customize API in general. Doom is designed
to be configured programmatically from your config.el, which can conflict with
Customize’s way of modifying variables./
#+end_quote

All necessary settings are therefore set by hand as part of this configuration file.
The only exceptions are "safe variable" and "safe theme" settings, which are
automatically saved by Emacs in =custom.el=, but this is OK as they don't conflict
with anything else from the config.

* Doom Modules

** Modules

This code is written to the =init.el= to select which modules to load.
Reference:
- Online reference: [[https://github.com/doomemacs/doomemacs/blob/master/templates/init.example.el][Doom emacs blob init.example.el]].
- Offline reference: "SPC f e example RET"

#+begin_src emacs-lisp :tangle init.el
(doom!
 :input
 ;;chinese
 ;;japanese
 ;;layout              ; auie,ctsrnm is the superior home row

 :completion
 ;(company +childframe) ; the ultimate code completion backend
 company ; the ultimate code completion backend
 ;;helm                ; the *other* search engine for love and life
 ;;ido                 ; the other *other* search engine...
 ;(ivy +prescient +childframe
 ;(ivy +prescient
 ;     -fuzzy +icons)   ; a search engine for love and life
 vertico               ; the search engine for the future

 :ui
 ;;deft                ; notational velocity for Emacs
 doom                  ; what makes DOOM look the way it does
 doom-dashboard        ; a nifty splash screen for Emacs
 ;;doom-quit           ; DOOM quit-message prompts when you quit Emacs
 ;;(emoji +unicode)    ;
 ;;fill-column         ; a `fill-column' indicator
 ;;hl-todo               ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
 ;;;;;;; hydra           ; hydra already removed from doom
 indent-guides         ; highlighted indent columns
 ;;ligatures           ; ligatures and symbols to make your code pretty again
 ;;minimap             ; show a map of the code on the side
 modeline              ; snazzy, Atom-inspired modeline, plus API
 nav-flash             ; blink cursor line after big motions
 ;;neotree             ; a project drawer, like NERDTree for vim
 ophints               ; highlight the region an operation acts on (previously evil-goggles)
 (popup
  ;;+all               ; ensure all temporary/special buffers (name started with space or asterix) treated as popups
  +defaults)           ; enable reasonable default popup rues for a variaty of buffers
 ;;tabs                ; a tab bar for Emacs
 (treemacs             ; a project drawer, like neotree but cooler
  +lsp                 ; enable lsp-treemacs integration and add shortcuts for common commands
  )
 ;;unicode             ; extended unicode support for various languages
 ;;vc-gutter           ; vcs diff in the fringe
 ;;vi-tilde-fringe       ; fringe tildes to mark beyond EOB
 ;;window-select         ; visually switch windows
 workspaces            ; tab emulation, persistence & separate workspaces
 ;;zen                   ; distraction-free coding or writing

 :editor
 (evil +everywhere)    ; come to the dark side, we have cookies
 file-templates        ; auto-snippets for empty files
 fold                  ; (nigh) universal code folding
 ;;(format +onsave)    ; automated prettiness
 ;;god                 ; run Emacs commands without modifier keys
 ;;lispy               ; vim for lisp, for people who don't like vim
 multiple-cursors      ; editing in many places at once
 ;;objed               ; text object editing for the innocent. But this is incompatible with :editor evil.
 ;;parinfer            ; turn lisp into python, sort of
 ;;rotate-text         ; cycle region at point between text candidates
 snippets              ; my elves. They type so I don't have to
 ;;word-wrap           ; soft wrapping with language-aware indent

 :emacs
 dired                 ; making dired pretty [functional]
 electric              ; smarter, keyword-based electric-indent
 ;;ibuffer             ; interactive buffer management
 undo                  ; persistent, smarter undo for your inevitable mistakes
 vc                    ; version-control and Emacs, sitting in a tree

 :term
 eshell                ; the elisp shell that works everywhere
 ;;shell               ; simple shell REPL for Emacs
 ;;term                ; basic terminal emulator for Emacs
 ;;vterm               ; the best terminal emulation in Emacs

 :checkers
 ;;(syntax +childframe)  ; tasing you for every semicolon you forget
 ;;syntax                ; tasing you for every semicolon you forget
                       ; 'syntax' activates flycheck-mode automatically
 ;;spell                 ; tasing you for misspelling mispelling
 ;;grammar             ; tasing grammar mistake every you make

 :tools
 ;;ansible
 ;;debugger              ; FIXME stepping through code, to help you add bugs
 ;;direnv
 docker
 ;;editorconfig        ; let someone else argue about tabs vs spaces
 ;;ein                 ; tame Jupyter notebooks with emacs
 (eval +overlay)       ; run code, run (also, repls)
 ;;gist                ; interacting with github gists
 lookup                ; navigate your code and its documentation
 (lsp
   +peek               ; use lsp-ui-peek for definitions and references
   )
 ;; magit                 ; a git porcelain for Emacs
 (magit +forge)        ; a git porcelain for Emacs + Github
 ;;make                ; run make tasks from Emacs
 ;;pass                  ; password manager for nerds
 ;;pdf                 ; pdf enhancements
 ;;prodigy             ; FIXME managing external services & code builders
 ;;;;;;rgb                   ; creating color strings ; already removed from doom
 ;;taskrunner          ; taskrunner for all your projects
 ;;terraform           ; infrastructure as code
 ;;tmux                ; an API for interacting with tmux
 tree-sitter           ; syntax and parsing, sitting in a tree...
 ;;upload              ; map local to remote projects via ssh/ftp

 :os
 (:if IS-MAC macos)    ; improve compatibility with macOS
 ;;tty                 ; improve the terminal Emacs experience

 :lang
 ;;agda                ; types of types of types of types...
 ;;beancount           ; mind the GAAP
 (cc +lsp +tree-sitter)          ; C/C++/Obj-C madness
 ;;clojure             ; java with a lisp
 common-lisp           ; if you've seen one lisp, you've seen them all
 ;;coq                 ; proofs-as-programs
 ;;crystal             ; ruby at the speed of c
 ;;csharp              ; unity, .NET, and mono shenanigans
 data                  ; config/data formats (csv-mode, nxml-mode)
 ;;(dart +flutter)     ; paint ui and not much else
 ;;elixir              ; erlang done right
 ;;elm                 ; care for a cup of TEA?
 emacs-lisp            ; drown in parentheses
 ;;erlang              ; an elegant language for a more civilized age
 ;;(ess +lsp)            ; emacs speaks statistics
 ;;factor
 ;;faust               ; dsp, but you get to keep your soul
 ;;fsharp              ; ML stands for Microsoft's Language
 ;;fstar               ; (dependent) types and (monadic) effects and Z3
 ;;gdscript            ; the language you waited for
 ;;(go +lsp)             ; the hipster dialect
 ;;(haskell +dante)    ; a language that's lazier than I am
 ;;hy                  ; readability of scheme w/ speed of python
 ;;idris               ; a language you can depend on
 (json +tree-sitter)                    ; At least it ain't XML
 ;;(java +meghanada)   ; the poster child for carpal tunnel syndrome
 ;;javascript          ; all(hope(abandon(ye(who(enter(here))))))
 ;;julia               ; a better, faster MATLAB
 ;;kotlin              ; a better, slicker Java(Script)
 (latex +latexmk)      ; writing papers in Emacs has never been so fun
 ;;lean
 ;;ledger              ; an accounting system in Emacs
 ;;lua                   ; one-based indices? one-based indices
 ;;markdown              ; writing docs for people to ignore
 ;;nim                 ; python + lisp at the speed of c
 ;;nix                 ; I hereby declare "nix geht mehr!"
 ;;ocaml               ; an objective camel
 (org                  ; organize your plain life in plain text
  +present             ; presentation, include reveal.js
  ;+roam2               ; Need sqlite3: $ sudo apt install sqlite3 libsqlite3-dev
                       ;               $ brew install sqlite3
  ;+pretty              ; Pretty unicode symbols for bullets and priorities. Keep
                       ; in mind: this can be expensive. If org becomes too slow,
                       ; it'd be wise to disable this flag.
  )
 ;;php                 ; perl's insecure younger brother
 plantuml              ; diagrams for confusing people more
 ;;purescript          ; javascript, but functional
 (python               ; yeah, monty python :D
  +lsp                 ; you gonna need this
  +pyright             ; use pyright lsp server instead of mspyls or pyls
  ;;+pyenv               ; python virtual environment support via pyenv
  +tree-sitter
  )
 qt                    ; the 'cutest' gui framework ever (qml-mode, qt-pro-mode)
 ;;racket                ; a DSL for DSLs
 ;;raku                ; the artist formerly known as perl6
 ;;rest                ; Emacs as a REST client
 ;;rst                   ; ReST in peace
 ;;(ruby +rails)       ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
 ;;rust                ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
 ;;scala               ; java, but good
 ;;scheme              ; a fully conniving family of lisps
 ;(sh +lsp)             ; she sells {ba,z,fi}sh shells on the C xor
 sh                    ; she sells {ba,z,fi}sh shells on the C xor
 ;;sml
 ;;solidity            ; do you need a blockchain? No.
 ;;swift               ; who asked for emoji variables?
 ;;terra               ; Earth and Moon in alignment for performance.
 ;;web                 ; the tubes
 ;;(yaml +lsp)           ; JSON, but readable
 ;;zig                 ; C, but simpler

 :email
 ;;(mu4e +gmail)
 ;;notmuch
 ;;(wanderlust +gmail)

 :app
 ;;calendar
 ;;emms
 ;;everywhere          ; *leave* Emacs!? You must be joking
 ;;irc                   ; how neckbeards socialize
 ;;(rss +org)          ; emacs as an RSS reader
 ;;twitter             ; twitter client https://twitter.com/vnought

 :config
 ;;literate
 (default +bindings +smartparens))
#+end_src

** Disabling Packages

#+begin_src emacs-lisp :tangle packages.el
(package! rtags :disable t)
(package! helm :disable t)
(package! helm-rtags :disable t)
(package! helm-lsp :disable t)
(package! ivy :disable t)
(package! ivy-rtags :disable t)
(package! swiper :disable t)
(package! counsel :disable t)
(package! ccls :disable t)
(package! conda :disable t)
(package! anaconda-mode :disable t)
(package! company-anaconda :disable t)
(package! ocamlformat :disable t)
(package! lsp-python-ms :disable t)
(package! lsp-ivy :disable t)
(package! evil-escape :disable t)
(package! projectile-ripgrep :disable t) ; name changed to something else ...
(package! projectile-ag :disable t)      ; name changed to something else ...
#+end_src

** Need to Have Packages

Will install these packages later:
- [[https://xenodium.com/emacs-org-block-completion-on-melpa/][Emacs org block completion on melpa]]
- [[https://www.reddit.com/r/emacs/comments/ntnhkc/how_i_jump_around_emacs_with_betterjumper/][How I jump around emacs with better jumper]]
- [[https://philjackson.github.io/emacs/widescreen/2021/06/06/wide-screen-emacs/][Widescreen Emacs and Vertical Splits]]

* General Configuration

** Doom Local Leader Key

=M-x= is one too many keystroke. Let's change it to =','=, however, =','= already being
used by evil-snipe. Hence, need to resolve the conflict.

Ref: [[https://github.com/hlissner/doom-emacs/issues/4242][Setting doom local leader key to "," conflicts with evil-snipe]].

#+begin_src emacs-lisp
(setq-default evil-snipe-override-evil-repeat-keys nil
              doom-localleader-key ","
              doom-localleader-alt-key "M-,")
#+end_src

** Better Defaults

Don't load xresources, it messes with our themes.

#+begin_src emacs-lisp
(setq-default inhibit-x-resources t)
#+end_src

Change the default encoding to UTF-8

#+begin_src emacs-lisp
(set-language-environment 'utf-8)
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq utf-translate-cjk-mode nil
      locale-coding-system 'utf-8
      default-file-name-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8
      coding-system-for-write 'utf-8)
#+end_src

Do not create lockfiles for files being edited

#+begin_src emacs-lisp
(setq-default create-lockfiles nil)
#+end_src

Do not need emacs backup file lah ...

#+begin_src emacs-lisp
(setq-default
 auto-save-default nil             ; don't create #autosave# files
 make-backup-files nil             ; don't create backup~ files
 create-lockfiles  nil)
#+end_src

Disable exit confirmation.

#+begin_src emacs-lisp
(setq-default confirm-kill-emacs nil)
#+end_src

Other default preferences

#+begin_src emacs-lisp
(set-fringe-mode '(0 . 0))            ; disable fringe, dun need it (no line wrap, etc)
(fset 'yes-or-no-p 'y-or-n-p)         ; replace yes/no prompts with y/n
(setq-default
 indent-tabs-mode nil                 ; use spaces (not tabs) for indenting
 truncate-lines t                     ; turn on truncating long lines
 require-final-newline t              ; always add a final newline
 delete-by-moving-to-trash nil        ; no need to go to OS's trash folder
 cursor-in-non-selected-windows t     ; hide cursor in inactive windows
 select-enable-clipboard t            ; merge system's and emacs's clipboard
 ;; disable, looks like Doom has it by default?
 split-height-threshold 0             ; i only want vertical window splitting
 split-width-threshold nil            ; and dunwan horizontal window splitting
 ;; vi like scrolling
 scroll-step 1                        ; scroll just goes down 1 line even it hits the bottom
 scroll-margin 3                      ; 3 lines margin
 ;;
 ;; Build-In VC Package
 vc-follow-symlinks t                 ; don't ask for confirmation for opening symlinked file
 ;; Ref https://magit.vc/manual/magit/Performance.html
 ;; I don't use VC in addition to Magit, so disable it to keep it from performing
 ;; unnecessary work (see also another option just below)
 ;; vc-handled-backends nil ; disable due to causing vcs segment gone in doom-modeline
 ;; You can also disable its use for Git but keep using it when using another version
 ;; control system:
 ;; vc-handled-backends (delq 'Git vc-handled-backends)
 ;;
 ;; always just just left-to-right text
 bidi-display-reordering nil           ; makes emacs a bit faster for very long lines
 dabbrev-case-replace nil              ; make sure case is preserved when expanding
 ;;
 ;; This section is related to window
 ;; For more info: https://www.masteringemacs.org/article/demystifying-emacs-window-manager
 ;; #1: If wwitching buffers manually with C-x b fails with error, so I want it to open somewhere
 switch-to-buffer-in-dedicated-window 'pop
 ;; #2: Treat manual buffer switching the same as programmatic switching
 switch-to-buffer-obey-display-actions t ; requires emacs 27+
 ;; Controlling Buffer and Window Display
 ;; If you want to control where a buffer or window must appear, you must customize
 ;; display-buffer-alist
 ;;
 ;; this one for minibuffer and echo area
 resize-mini-windows 'grow-only        ; this to make casual-calc height to grow
 max-mini-window-height 0.75           ; default 0.25
 ;; looks like below do the trick for cacual-calc
 ;window-min-height      8              ; min total height, in lines, of any window
 )
#+end_src

Let's use =hippie-expand= instead of =dabbrev= as default. Ref: [[https://www.masteringemacs.org/article/text-expansion-hippie-expand][Text Expansion with Hippie Expand]]:
#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

Also, let's enable local variales and eval:
#+begin_src emacs-lisp
(after! org
  (setq-default enable-local-variables t
                enable-local-eval t))
#+end_src

** Mac Modifiers

Change Mac modifiers to my liking.

#+begin_src emacs-lisp
(cond (IS-MAC
 ;; 1) Mac build-in Keyboard & Mouse preference:
 ;;    - Swapt [CapsLock] and [Control]
 ;;
 ;; 2) KeyRemap4MacBook:
 ;;    - Map [Option_R] to [Control_R] (only in Emacs, Terminal, X11)
 ;;    Note: This KeyRemap4MacBook no need anymore because I can remap
 ;;          option to control using mac-option-modifier below ...
 ;;
 ;; 3) Then below:
 ;;
 ;;    See https://emacsformacosx.com/tips
 ;;    Here's variables controlling the modifier keys:
 ;;
 ;;    - ns-alternate-modifier
 ;;    - ns-command-modifier
 ;;    - ns-control-modifier
 ;;    - ns-function-modifier
 ;;    - ns-option-modifier (just a different name for ns-alternate-modifier)
 ;;    - ns-right-alternate-modifier
 ;;    - ns-right-command-modifier
 ;;    - ns-right-control-modifier
 ;;    - ns-right-option-modifier
 ;;
 ;;    Each variable can be set to 'control, 'meta, 'alt, 'super, or 'hyper.
 ;;
 ;;    In addition ns-alternative-modifier (and ns-option-modifier) can be set to 'none,
 ;;    which lets it get interpreted by the OS so it can be used to input special
 ;;    characters.
 ;;
 ;;    The ns-right-* variables are set to 'left by default which makes them the same as
 ;;    their left counterpart.
 (setq mac-command-modifier      'meta      ; [Command] behaves like [Meta]
       mac-option-modifier       'control   ; [Option]  behaves like [Control]
       mac-right-option-modifier 'control)))
#+end_src

** Frame Title

Show full path of current buffer. See format specifier [[https://www.gnu.org/software/emacs/manual/html_node/elisp/_0025_002dConstructs.html#g_t_0025_002dConstructs][%-Constructs]].

#+begin_src emacs-lisp
(setq-default frame-title-format (list (system-name) ":" "%f"))
#+end_src

** Persist Frame Geometry

Reference: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#persist-emacs-initial-frame-position-dimensions-andor-full-screen-state-across-sessions][Persist Emacs Frame]].

#+begin_src emacs-lisp
;; add to config.el
(when-let (dims (doom-store-get 'last-frame-size))
  (cl-destructuring-bind ((left . top) width height fullscreen) dims
    (setq initial-frame-alist
          (append initial-frame-alist
                  `((left . ,left)
                    (top . ,top)
                    (width . ,width)
                    (height . ,height)
                    (fullscreen . ,fullscreen))))))

(defun save-frame-dimensions ()
  (doom-store-put 'last-frame-size
                  (list (frame-position)
                        (frame-width)
                        (frame-height)
                        (frame-parameter nil 'fullscreen))))

(add-hook 'kill-emacs-hook #'save-frame-dimensions)
#+end_src

** Scratch Buffer
*** Doom Scratch Buffer
Doom has persistance scratch buffer named =doom:scratch= with:
- =M-x doom/switch-to-scratch-buffer (SPC b X)=, or
- =M-x doom/open-scratch-buffer (SPC x)=

#+begin_src emacs-lisp
(setq-default doom-scratch-dir (format "%s/private" (getenv "DOOMDIR"))
              doom-scratch-initial-major-mode 'text-mode)
#+end_src

*** Emacs Scratch Buffer
This is for default emacs scratch buffer named =scratch=. Available on MELPA.
Ref: [[https://umarahmad.xyz/blog/quick-scratch-buffers/][Quick persistent scratch buffer]], Github: [[https://github.com/Fanael/persistent-scratch/][Fanael/persistent-scratch]].

#+begin_src emacs-lisp :tangle no
(package! persistent-scratch
  :recipe (:branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! persistent-scratch
 :init
 :config
 ;; Directory to save old versions of scratch buffer saves to
 (setq persistent-scratch-backup-directory (format "%s/private/persist-scratch" (getenv "DOOMDIR")))
 ;; Enable both autosave and restore the last saved data on emacs start
 (persistent-scratch-setup-default)
 ;; See https://umarahmad.xyz/blog/quick-scratch-buffers/
 ;; (setq persistent-scratch-save-file (concat CACHE-DIR ".persistent-scratch"))
 (setq persistent-scratch-save-file (concat persistent-scratch-backup-directory "/persistent-scratch"))
 ;; (persistent-scratch-restore)
 ;; (persistent-scratch-setup-default)
 (persistent-scratch-autosave-mode)
 (defun persistent-scratch-buffer-identifier()
     (string-match "^*scratch:" (buffer-name)))
 (defun persistent-scratch-get-scratches()
     (let ((scratch-buffers)
         (save-data
         (read
             (with-temp-buffer
             (let ((coding-system-for-read 'utf-8-unix))
                 (insert-file-contents persistent-scratch-save-file))
             (buffer-string)))))
     (dolist (saved-buffer save-data)
         (push (substring (aref saved-buffer 0) (length "*scratch:")) scratch-buffers))
     scratch-buffers))

 (defun persistent-scratch-restore-this(&optional file)
     (interactive)
     (let ((current-buf (buffer-name (current-buffer)))
         (save-data
         (read
             (with-temp-buffer
             (let ((coding-system-for-read 'utf-8-unix))
                 (insert-file-contents (or file persistent-scratch-save-file)))
             (buffer-string)))))
     (dolist (saved-buffer save-data)
         (when (string= current-buf (aref saved-buffer 0))
         (with-current-buffer (get-buffer-create (aref saved-buffer 0))
             (erase-buffer)
             (insert (aref saved-buffer 1))
             (funcall (or (aref saved-buffer 3) #'ignore))
             (let ((point-and-mark (aref saved-buffer 2)))
             (when point-and-mark
                 (goto-char (car point-and-mark))
                 (set-mark (cdr point-and-mark))))
             (let ((narrowing (aref saved-buffer 4)))
             (when narrowing
                 (narrow-to-region (car narrowing) (cdr narrowing))))
             ;; Handle version 2 fields if present.
             (when (>= (length saved-buffer) 6)
             (unless (aref saved-buffer 5)
                 (deactivate-mark))))))))

 (defun persistent-scratch-quick-open()
     (interactive)
     (let* ((scratch-buffers (persistent-scratch-get-scratches))
         (chosen-scratch (concat "*scratch:"
                                 (completing-read
                                 "Choose a scratch: "
                                 scratch-buffers nil nil nil nil
                                 (random-alnum 4))))
         (buffer-exists-p (get-buffer chosen-scratch)))
     (pop-to-buffer chosen-scratch)
     (unless buffer-exists-p
         (persistent-scratch-restore-this))
     (persistent-scratch-mode)))
 (setq persistent-scratch-scratch-buffer-p-function 'persistent-scratch-buffer-identifier)
)
#+end_src
** Dashboard
**** Splash Screen

Zzamboni made a super simple set of Doom-Emacs custom splash screens by combining
[[http://www.thedreamcastjunkyard.co.uk/2018/03/cross-platform-online-multiplayer-added.html][a Doom logo]] with the word "Emacs" rendered in the [[https://fontmeme.com/doom-font/][Doom Font]]. You can see them
at https://gitlab.com/zzamboni/dot-doom/-/tree/master/splash.

tachanka61 also makes another set of images, refer to: [[https://github.com/tachanka61/graphics][tachanka61/graphics]].


If you want to choose at random among a few different splash images, you can
list them in =alternatives=.

#+begin_src emacs-lisp
(let
    ;; for light background
    ((alternatives '("swan-5165109-500.svg" "doom-emacs-bw-light.svg")))
    ;; for dark background
    ;; ((alternatives '("swan-5165109-500.svg" "doom-emacs-bw-light.svg")))
  (setq fancy-splash-image
        (concat doom-private-dir "splash/"
                (nth (random (length alternatives)) alternatives))))
#+end_src

**** Random Quotes

Show random quote:

#+begin_src emacs-lisp
;; if you don't need widget function, you can remove-hook it
;; see +doom-dashboard-functions at modules/ui/doom-dashboard/config.el
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-loaded)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

(defvar quotes
  '("There are approximately 100,000 hairs on average human head"
    "At any given moment, about 0.7% of the people in the world are drunk"
    "Shift your focus from the past to the future"
    "It takes an average person 7 minutes to fall asleep"
    "The limits of my language means the limits of my world"
    "There are only 2 hard things in coding: cache invalidation and naming things"
    "If you can't explain it simply, you don't understand it well enough"
    "The world is changed by examples, not by opinions"
    "An excessive knowledge of Marxism is a sign of a misspent youth"
    "Give a man a fish, you feed him for a day. Teach a man to fish, you feed him for a lifetime"
    "The tools we use have a profound influence on our thinking habits, and, on our thinking abilities"
    "Your text editor reveals about your personality"
    "When you talk, you spray around 2.5 microscopic saliva droplets per word"
    "An apple in the morning will keep you more awake than a cup of coffee"
    "You miss 100% of the shots you never take"
    "To the man who only has a hammer, everything he encounters begins to look like a nail"
    "Good days give you happiness and bad days give you experience"
    "We are what we repeatedly do; excellence, then, is not an act but a habit"
    "A wise man gets more use from his enemies than a fool from his friends"
    "Our brains actually don't mind hard work, we just don't love the idea of it"
    "Success is how high you bounce after you hit bottom"
    "Think rationally, talk emotionally"
    "I’d rather live with a good question than a bad answer"
    "Imitation is suicide"
    "Do what you must, and your friends will adjust"
    "I wish I was an octopus, so I can slap eight people at once"
    "Doing nothing is hard, you never know when you're done"
    "When nothing is going right, go left"
    "After (M)onday and (T)uesday comes WTF!"
    "I could agree with you, but then we'd both be wrong"
    "I hear and I forget, I see and I remember. I do and I understand"
    "I might fall down but that does not mean I'll stay there"
    "Every accomplishment starts with the decision to try"
    "Rule#1: There's always a dame"
    "Rule#2: Someone always gets hurt"
    "Rule#3: Reality is stranger than fiction"
    "Love is like war, easy to begin but hard to end"
    "There are no straight lines in nature"
    "Opportunity does not knock, it presents itself when you beat down the door"
    "A diamond is merely a lump of coal that did well under pressure"
    "Action speaks louder than words"
    "Design for the future, because it will be here sooner than you think"
    "Ninety nine failed solutions equals a gain of 99 pieces of information"
    "Repair what you can but when you must fail, fail noisily and as soon as possible"
    "Too much agrement kills a chat"
    "Don't talk about yourself; it will be done when you leave"
    "Your best teacher is your last mistake"
    "A smile can mean a thousand words, but it can also hide a thousand problems"
    "Laziness is nothing more than the habit of resting before you get tired"
    "When we talk to God, we're praying. When God talks to us, we're schizophrenic"
    "Smile and let everyone know that today, your're a lot stronger than yesterday"
    "Look at the order in which you do things"
    "A line has two sides"
    "In the Beginning ... Was the command Line"
    "Life is 10% what happens to you and 90% how you react to it"
    "The secret of getting ahead is getting started"
    "Once you eliminate your number one problem, You promote number two"
    "Clarity is better than cleverness"
    "How beautiful it is to find someone who asks for nothing but your company"
    "When in doubt, use brute force"
    "Teachers open the door. You enter by yourself"
    "Rome was not built in a day, neither in a thousand years"
    "Never trust a man when he's in love, drunk, or running for office"
    "User: the word computer professionals use when they mean 'idiot'"
    "Don't wish it were easier, wish you were better"
    "Remind yourself that 'done' is better than perfect"
    "Don't look back. You are not going that way"
    "Nothing lasts forever but at least we got these memories"
    "Don't tell people your plans. Show them your results."
    "In a room full of software architects, if two agree on the same thing, that's a majority"
    "Time moves in one direction, memory in another"
    "If you automate a mess, you get an automated mess"
    "Don't document the problem, fix it"
    "If the code and the comments do not match, possibly both are incorrect"
    "I think it's a new feature. Don't tell anyone it was an accident"
    "When debugging, novices insert corrective code; experts remove defective code"
    "Like glass, it's better to leave them broken than to hurt yourself putting it back together"
    "Adding manpower to a late software project makes it later!"
    "Better train people and risk they leave - than do nothing and risk they stay"
    "Good judgment comes from experience, and experience comes from bad judgment"
    "Don't comment bad code - rewrite it"
    "It's not a bug - it's an undocumented feature"
    "The jump always feels scary, and often, the landing is amazing"
    "Take your time. Recharge and come back stronger"
    "Copy and paste is a design error"))

(defun ttk/quotes ()
 (insert
  "\n"
  (propertize
   (+doom-dashboard--center
    +doom-dashboard--width
    (nth (random (length quotes)) quotes))
   'face 'doom-dashboard-loaded))
 "\n")

;; (setq mybanner (pop +doom-dashboard-functions))
;; (add-to-list '+doom-dashboard-functions 'ttk/quotes)
;; (add-to-list '+doom-dashboard-functions mybanner)

;; append it to the last
(add-to-list '+doom-dashboard-functions 'ttk/quotes t)
#+end_src

** Fonts

My favourite fonts:

+ [[https://input.fontbureau.com][Input]].
+ [[https://fonts.google.com/specimen/Roboto+Mono][Roboto Mono]].
+ [[https://typeof.net/Iosevka/][Iosevka]] and [[https://github.com/be5invis/Iosevka][Installation Guide]]. Also [[https://github.com/be5invis/Iosevka][Iosevka on GitHub]].

On MacOS
#+begin_example
$ brew tap homebrew/cask-fonts
$ brew install --cask font-iosevka
$ brew install --cask font-iosevka-ss04
#+end_example

To install custom fonts in linux:

#+begin_example
$ cd ~/Downloads
$ wget https://github.com/be5invis/Iosevka/releases/download/v29.0.4/SuperTTC-IosevkaSS04-29.0.4.zip
$ unzip SuperTTC-IosevkaSS04-29.0.4.zip
  it will extract to a font file: IosevkaSS04.ttc
$ sudo mkdir /usr/local/share/fonts/iosevka-font
$ sudo mv IosevkaSS04.ttc /usr/local/share/fonts/iosevka-font/
$ sudo chown root:staff /usr/local/share/fonts/iosevka-font/IosevkaSS04.ttc
$ sudo fc-cache -fv
#+end_example

To list available fonts in linux:
#+begin_example
$ fc-list | grep InputSans
#+end_example

To list fonts that emacs can see:
#+begin_example
M-x menu-set-font
#+end_example

To list font family that emacs can see, in =*scratch*= buffer:
#+begin_example
(font-family-list)
#+end_example
Then =for evil mode=:
- In normal mode, move the the end of the expression
- =C-x C-e= (or, =M-x eval-last-sexp=)
- There will show in minibuffer

Settings related to fonts:

+ 'doom-font' -- standard monospace font that is used for most things.
+ 'doom-variable-pitch-font' -- variable font which is useful in some plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.

#+begin_src emacs-lisp
(cond
 (IS-OMICRON
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-COVID
  (setq doom-font                (font-spec :family "Input Mono Condensed" :size 12)
        doom-variable-pitch-font (font-spec :family "Input Mono Condensed" :size 12)
        doom-big-font            (font-spec :family "Input Mono Condensed" :size 18)))
 (IS-IGD1943U
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-IGL7568W
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-VDI1039
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-IGD0464U
  (setq doom-font                (font-spec :family "Input Mono Condensed" :size 12)
        doom-variable-pitch-font (font-spec :family "Input Mono Condensed" :size 12)
        doom-big-font            (font-spec :family "Input Mono Condensed" :size 18)))
 (IS-ERIS
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-HORUS
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 20)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 20)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 24)))
 (IS-DEDUN
  (setq doom-font                (font-spec :family "Ubuntu Mono" :size 24)
        doom-variable-pitch-font (font-spec :family "Ubuntu Mono" :size 24)
        doom-big-font            (font-spec :family "Ubuntu Mono" :size 32)))
 (t
  (setq doom-font                (font-spec :family "monospace" :size 20)
        doom-variable-pitch-font (font-spec :family "monospace" :size 20)
        doom-big-font            (font-spec :family "monospace" :size 24))))
#+end_src

Check this reference:

- [[https://www.dschapman.com/notes/mix-monospace-and-variable-fonts-in-doom-emacs][How to mix monospace and viariable width fonts]]
- [[https://emacs.stackexchange.com/questions/62987/cannot-set-correct-size-for-variable-pitch-font-in-doom-emacs][Cannot set correct size for variable pitch font in Doom Emacs]].

Allow mixed fonts in a buffer. This is particularly useful for Org mode,
so I can mix source and prose blocks in the same document.

#+begin_src emacs-lisp :tangle no
(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(setq mixed-pitch-variable-pitch-cursor t)
#+end_src

** Themes

I customize existing doom-themes to my liking:

- Copy one of doom-themese to =${DOOMDIR}/themes=.
- Change the filename.
- Change =def-doom-theme= name to avoid conflict with the existing.
- That's it. Customize other settings as you please.

#+begin_src emacs-lisp
(when (modulep! :ui doom)
  (setq doom-themes-enable-bold t      ; if nil, bold i universally disabled
      doom-themes-enable-italic t      ; if nil, italics is universally disabled
  )
  ;; select theme
  (cond
   ((or IS-OMICRON IS-IGD0464U)
    (setq doom-theme 'ttk-doom-solarized-light))
   (IS-IGL7568W
    (setq doom-theme 'ttk-doom-one-light))
   (IS-VDI1039
    (setq doom-theme 'ttk-doom-one-light))
   (IS-IGD1943U
    (setq doom-theme 'ttk-doom-one-light))
   (IS-COVID
    (setq doom-theme 'ttk-doom-solarized-light))
   (IS-ERIS
    (setq doom-theme 'ttk-doom-one-light))
   (IS-HORUS
    (setq doom-theme 'ttk-doom-one-light))
   (IS-DEDUN
    (setq doom-theme 'ttk-doom-one-light))
   (t
    (setq doom-theme 'ttk-doom-zenburn)))
  ;; corrects (and improves) org-mode's native fontification
  (doom-themes-org-config))
#+end_src

#+begin_src emacs-lisp
;; ref: https://github.com/bbatsov/solarized-emacs
;; if you are using emacs under X you might like the following setting which puts
;; the underline below the font bottomline instead of the baseline.
(if (display-graphic-p)
  (progn
   ;; in graphics mode
   (setq x-underline-at-descent-line t))
  ;; else in terminal
  ;; do nothing
  )
;; get the right time to set face of hl-line is a bit tricky
;; each theme has its own way to set and clear
;; hence, call this function after switching to a theme
(defun ttk/hl-line-underline-on ()
  "Enable hl-line underline"
  (interactive)
  (set-face-background 'hl-line nil)
  (set-face-foreground 'hl-line nil)
  (set-face-underline 'hl-line t)
  ;; change cursor's color
  (setq evil-normal-state-cursor '(box "tomato")
        evil-insert-state-cursor '(bar "medium sea green")
        evil-visual-state-cursor '(hollow "orange")))
;;(ttk/hl-line-underline-on)
#+end_src

This is on my TODO list for the next themes:
- [[https://www.reddit.com/r/emacs/comments/t7doal/i_bet_you_use_hllinemode_do_you_know_how_it_works/][How hl-line-mode works]]
- [[https://github.com/rougier/nano-emacs][GNU Emacs/NANO]]
- [[https://github.com/ronisbr/doom-nano-themes][Doom NANO Themes]]

** Line settings

I like relative line number so vertical jumping is easier.

#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type 'relative)  ; relative line number
(setq display-line-numbers-type t)      ; absolute line number
#+end_src

Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for
toggle-truncate-lines.

#+begin_src emacs-lisp
(map! :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

** Pulsing Cursor

Ref: [[https://github.com/jasonjckn/pulsing-cursor][github.com/jasonjckn/pulsing-cursor]]

#+begin_src emacs-lisp :tangle packages.el
(package! pulsing-cursor
  :recipe (:host github
           :repo "jasonjckn/pulsing-cursor"))
#+end_src

Configuration:
#+begin_src emacs-lisp
(use-package! pulsing-cursor
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
  (setq pulsing-cursor-delay 1.0        ; 1.0 sec
        pulsing-cursor-interval 1.5     ; 1.5 sec
        pulsing-cursor-blinks 10        ; how many blinks before become solid
   )
 ;; (pulsing-cursor-mode +1)               ; enable on start
 (pulsing-cursor-mode -1)               ; disable on start
  )
#+end_src

** Rainbow mode

*** =:tools rgb=

=hl-line-mode= overrides the color highlighting of =rainbow-mode,= limiting the use
of that plugin and on-site color changes using kurecolor. To automatically
disable it only when rainbow-mode is active:

#+begin_src emacs-lisp
(when (modulep! :tools rgb)
  (add-hook! 'rainbow-mode-hook
             (hl-line-mode (if rainbow-mode -1 +1))))
#+end_src

*** Manual package installation

No longer needed because already included in =:tools rgb=.

#+begin_src emacs-lisp :tangle no
(package! rainbow-mode)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! rainbow-mode
  :hook (emacs-lisp-mode . rainbow-mode))
#+end_src

** Rainbow delimiters

I like balanced and colorful delimiters provided by [[https://github.com/Fanael/rainbow-delimiters.git][rainbow-delimiters]].
#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-delimiters)
#+end_src

And configure it only for certain modes.
#+begin_src emacs-lisp
;;
;; balanced and colorful delimiters
;;     https://github.com/Fanael/rainbow-delimiters.git
;;
;; Toggle single buffer: M-x rainbow-delimiters-mode
(use-package! rainbow-delimiters
 ;; if you omit :defer, :hook, :commands, or :after, then the package is loaded
 ;; immediately. By using :hook here, the `rainblow-delimiters` package won't be loaded
 ;; until prog-mode-hook is triggered (by activating a major mode derived from
 ;; it, e.g. python-mode)
 :hook (prog-mode . rainbow-delimiters-mode)
 :init
 ;; code here will run immediately
 :config
 ;; code here will run after the package is loaded
)
#+end_src

** Modeline

Interesting: [[https://www.gonsie.com/blorg/modeline.html][Beautifying the Mode Line]]

*** doom-modeline

Now is the time to customize modeline, see [[https://seagle0128.github.io/doom-modeline/][doom-modeline]] and the [[https://github.com/seagle0128/doom-modeline#faq][FAQ]].
If you are interested in adding your own segment, please refer to: [[https://www.reddit.com/r/DoomEmacs/comments/ie96qy/truncating_buffer_name_on_mode_line_doommodeline/][reddit link]].
#+begin_src emacs-lisp
(use-package! doom-modeline
 :init
 (setq doom-modeline-percent-position nil ; dunwan buffer % at segment buffer-position
       doom-modeline-project-detection 'projectile ; how to detect project root
       ;; doom-modeline-project-detection 'project ; how to detect project root
       doom-modeline-buffer-file-name-style 'buffer-name ; uniquify buffer name
       doom-modeline-workspace-name nil                  ; need eyebrowse
       doom-modeline-persp-name t                        ; workspace using persp-mode
       doom-modeline-display-default-persp-name t        ; workspace using persp-mode
       doom-modeline-persp-icon nil                      ; workspace using persp-mode
       doom-modeline-lsp nil                             ; no need display lsp state
       ;; Whether display the environment version
       doom-modeline-env-version nil
       ;; Or for individual languages
       doom-modeline-env-enable-python t
       doom-modeline-env-enable-ruby t
       doom-modeline-env-enable-perl t
       doom-modeline-env-enable-go t
       doom-modeline-env-enable-elixir t
       doom-modeline-env-enable-rust t
   )
 :config
  ;; See list of doom-modeline-def-segment in doom-modeline-segments.el
  (doom-modeline-def-modeline 'ttk/my-simple-line
   '(bar vcs persp-name buffer-info-simple major-mode minor-modes buffer-position)
   '(selection-info misc-info))
  ;; Add to `doom-modeline-mode-hook` or other hooks
  (defun setup-custom-doom-modeline ()
   (doom-modeline-set-modeline 'ttk/my-simple-line t))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)
)
#+end_src

*** which-function-mode

Emacs comes with a minor mode called which-function-mode that shows the current
defun – Lisp lingo for a function, but Emacs-speak for anything that would count as one –
in your modeline by looking at where your point is.

#+begin_src emacs-lisp
;;
;; which-function-mode
;;
(if t
    (which-function-mode 1) ; enable for all modes
  (progn                    ; enable for certain modes
    (require 'which-func)
    (eval-after-load "which-func-modes"
     '(setq which-func-modes '(c-mode cc-mode c++-mode java-mode org-mode python-mode)))
    (which-func-mode 1)))
#+end_src

*** Show current time

Show current time manually with =M-x display-time=.

#+begin_src emacs-lisp
(setq-default
 ;; %H is the hour on a 24-hour clock
 ;; %I is on a 12-hour clock
 ;; %k is like %H only blank-padded
 ;; %l is like %I blank-padded.
 ;; %M is the minute
 ;; %S is the second
 display-time-default-load-average nil
 ;; display-time-format "%p%I:%M"
 display-time-format "%H:%M"
 display-time-interval 60               ; update every 60 sec
 display-time-default-load-average nil  ; don't show load average
 )
 ;; display clock in modeline
 (display-time-mode t)
#+end_src

** Indent guide

How to disable in prog-mode?

Here's how doom configure it [[https://github.com/doomemacs/doomemacs/blob/master/modules/ui/indent-guides/config.el][Doom config for highlisht-indent-guides]].

#+begin_src emacs-lisp :tangle no
;; (when (modulep! :ui indent-guides)
  (with-eval-after-load 'highlight-indent-guides
    (remove-hook 'prog-mode #'highlight-indent-guides-mode))
;; )
#+end_src

** Shrink Whitespace

I've been using it for so many years, can't live without.
See: [[https://github.com/jcpetkovich/shrink-whitespace.el][jcpetkovich github]].

#+begin_src emacs-lisp :tangle packages.el
;; https://github.com/jcpetkovich/shrink-whitespace.el
(package! shrink-whitespace)
#+end_src

#+begin_src emacs-lisp
;; shrink-whitespace.el
;;     https://github.com/jcpetkovich/shrink-whitespace.el.git
;;
;; delete blank lines and shrink whitespace
(use-package! shrink-whitespace
 :defer t
 :bind (("M-\\" . shrink-whitespace)))
#+end_src

** Registers

Ref: [[https://tech.toryanderson.com/2020/07/03/emacs-tip-registers/][The Simple Genius of Emacs Registers]]

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("r" . "register")
       "SPC" #'point-to-register
       "l" #'list-registers
       "i" #'insert-register
       "j" #'jump-to-register
       "s" #'copy-to-register))
#+end_src

** undo

I'm using undo-fu and don't want to persist undo history across session.

Ref: [[https://github.com/doomemacs/doomemacs/tree/master/modules/emacs/undo][Disabling persistent undo history]].

#+begin_src emacs-lisp
(after! undo-fu
 (remove-hook 'undo-fu-mode-hook #'global-undo-fu-session-mode))
#+end_src

** Key bindings

Doom Emacs has an extensive keybinding system, and most module functions are
already bound. I modify some keybindings here.

For =evil-normal-state-map=, see: =~/.emacs.d/.local/straight/repos/evil/evil-maps.el=.

For more, see [[#ref-keybindings]].

*** First, this is for one of my laptop keyboard

Update [05-May-2024]. No need below. Better approach is in linux
keyboard setting: Map Hyper to Win

In this laptop, =alt= is somehow detected as =super=. So:

#+begin_src emacs-lisp :tangle no
(define-key global-map (kbd "s-x") 'execute-extended-command)
#+end_src

*** Emulating vi's =%= key

One of the few things I missed in Emacs from vi was the =%= key, which jumps to the
parenthesis, bracket or brace which matches the one below the cursor. This function
implements this functionality, bound to the same key. Inspired by [[http://www.emacswiki.org/emacs/NavigatingParentheses][NavigatingParentheses]],
but modified to use =smartparens= instead of the default commands, and to work on brackets
and braces.

#+begin_src emacs-lisp
(after! smartparens
  (defun zz/goto-match-paren (arg)
    "Go to the matching paren/bracket, otherwise (or if ARG is not
    nil) insert %.  vi style of % jumping to matching brace."
    (interactive "p")
    (if (not (memq last-command '(set-mark
                                  cua-set-mark
                                  zz/goto-match-paren
                                  down-list
                                  up-list
                                  end-of-defun
                                  beginning-of-defun
                                  backward-sexp
                                  forward-sexp
                                  backward-up-list
                                  forward-paragraph
                                  backward-paragraph
                                  end-of-buffer
                                  beginning-of-buffer
                                  backward-word
                                  forward-word
                                  mwheel-scroll
                                  backward-word
                                  forward-word
                                  mouse-start-secondary
                                  mouse-yank-secondary
                                  mouse-secondary-save-then-kill
                                  move-end-of-line
                                  move-beginning-of-line
                                  backward-char
                                  forward-char
                                  scroll-up
                                  scroll-down
                                  scroll-left
                                  scroll-right
                                  mouse-set-point
                                  next-buffer
                                  previous-buffer
                                  previous-line
                                  next-line
                                  back-to-indentation
                                  doom/backward-to-bol-or-indent
                                  doom/forward-to-last-non-comment-or-eol
                                  )))
        (self-insert-command (or arg 1))
      (cond ((looking-at "\\s\(") (sp-forward-sexp) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (sp-backward-sexp))
            (t (self-insert-command (or arg 1))))))
  (map! "%" 'zz/goto-match-paren))
#+end_src

* Personal Info and GPG

Ref:
- Mastering Emacs: [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]].
- Magnus Random Stuff: [[https://magnus.therning.org/2024-09-01-improving-how-i-handle-secrets-in-my-work-notes.html][Improving how I handle secrets in my work notes]].

<<personal_info_gpg>>
This is used by GPG and other things.

** First: Installation and Key-Pair Generation

#+begin_example
$ sudo apt install gpg
$ gpg --gen-key
#+end_example

It will store the key pair in:

#+begin_example
$ tree ~/.gnupg/
/home/user/.gnupg/
├── openpgp-revocs.d
│   └── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.rev
├── private-keys-v1.d
│   ├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.key
│   └── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.key
├── pubring.kbx
├── random_seed
├── S.gpg-agent
├── S.gpg-agent.browser
├── S.gpg-agent.extra
├── S.gpg-agent.ssh
└── trustdb.gpg
#+end_example

To list your secret keys:

#+begin_example
$ gpg --list-secret-keys
/home/user/.gnupg/pubring.kbx
-------------------------------
sec   rsa3072 2024-03-16 [SC] [expires: 2026-03-16]
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
uid           [ultimate] Sire Gandalf <gandalf.sire@nomail.com>
ssb   rsa3072 2024-03-16 [E] [expires: 2026-03-16]
#+end_example

** Second: Create a file you want to encrypt

I create a file in my home directory:

#+begin_example
$ touch ~/.authinfo
#+end_example

Encrypt it with the uid email address in your secret key:

#+begin_example
$ gpg -e -r gandalf.sire@nomail.com ~/.authinfo
#+end_example

It will encrypt and create a new file by adding =.gpg= extension:

#+begin_example
$ ls -alF ~
-rw-r--r-- 1 gandalf gandalf    0 Mar 17 08:24 .authinfo
-rw-r--r-- 1 gandalf gandalf  469 Mar 17 08:25 .authinfo.gpg
#+end_example

You can delete =~/.authinfo= now.

** Third: Emacs configuration

#+begin_src emacs-lisp :tangle no
(add-hook 'after-init-hook
           (lambda ()
             (let ((file-name-handler-alist '(("\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'" . epa-file-handler))))
               (load-file (expand-file-name "personal.el.gpg" doom-private-dir)))))
#+end_src

Now, let's force Emacs to use its own internal password prompt instead
of an external pin entry program.

#+begin_src emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
#+end_src

Speaking of GPG, I use =~/.authinfo.gpg= in home directory instead of
the default in =~/.emacs.d=. Reason: I don't want to accidentally purge
this file (e.g. =rm -rf ~/.emacs.d=).

#+begin_src emacs-lisp
(setq auth-sources '((:source "~/.authinfo.gpg")) ; can have multiple sources
      auth-source-cache-expiry nil                ; default is 7200 (2h)
      auth-source-debug t)
#+end_src

Now, emacs will be able to automatically encrypt/decrypt =~/.authinfo.gpg=
on the fly.

* Tree-Sitter

** Use Emacs-Tree-Sitter for Hightlighting in Doom Emacs

Note on 1-July-2022: This section is no longer needed. Doom Emacs has module tree-sitter
in =tools/tree-sitter=.

Ref:
- [[https://github.com/doomemacs/doomemacs/tree/master/modules/tools/tree-sitter][Doom Emacs: tools/tree-sitter]]
- [[https://abdelhakbougouffa.pro/posts/config/][Abdelhak's Blog: Doom Emacs Configuration]]
- [[https://github.com/doomemacs/doomemacs/tree/master/modules/tools/tree-sitter][Parser for these languages]]
- [[https://emacs-tree-sitter.github.io/syntax-highlighting][These languages]]

Section below is now obsolete.

Ref: [[https://hungyi.net/posts/use-emacs-tree-sitter-doom-emacs/][Use Emacs-Tree-Sitter for Hightlighting in Doom Emacs]]

#+begin_src emacs-lisp :tangle no
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

* Evil
** General

Ref: [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil][Doom editor/evil]]

#+begin_src emacs-lisp
(when (modulep! :editor evil)
  (setq-default
    ;; i don't like the o/O keys will respect and continue commented lines, so disable it.
    +evil-want-o/O-to-continue-comments nil
    ;; if t then these will make cursor follow the new splitted window
    evil-split-window-below nil     ; t: follow new splitted window, nil: remain
    evil-vsplit-window-below nil    ; t: follow new splitted window, nil: remain
    ;; let's mimic the original vim behavior and don't make mistakes
    evil-want-fine-undo t
  )
  ;;
  (after! evil
    (setq evil-move-cursor-back t       ; default: move the block cursor when toggling insert mode
          evil-kill-on-visual-paste nil ; don't put overwritten text in the kill ring
          )))
#+end_src

** Move Around

So many ways to move around. The lazy =j=, =k=, =l=, =h= are in many ways too slow.
You can train yourself with Evil Motion Trainer to kill the habit of =jklh=.

I categorize my movement into 3 categories:

*** Vertical Movement

Ref: [[https://github.com/PythonNut/evil-easymotion][evil-easymotion]].

Moving down: =gsj=, moving up: =gsk=.

It's better than relative line number, as I don't have to switch to
the left and type =12j=. I just look at where I want to go, type =gsj=
and press the letter that pops up.

*** Horizontal Movement

Ref: [[https://github.com/hlissner/evil-snipe][evil-snipe]] and [[https://noelwelsh.com/posts/2019-01-10-doom-emacs.html][Noel Welsh's Doom Emacs Workflows]].

Moving forward: =s??=, moving backward: =S??=. The last snipe with =s=.

Eg: =Cook coca-cola chicken= and wanting to jump to =chicken=.

Sure you can press =fc= a few times, or maybe jump through with =w=. But
instead, you could type =sch=.

*** Arbitrary Movement

Ref: =evil avy goto char 2=

Bound to =gss=

** evil-mc

*** Incompatibility

Ref: [[https://www.reddit.com/r/emacs/comments/iu0euj/getting_modern_multiple_cursors_in_emacs/][evil-mc incompatibility]]. Evil-mc is incompatible with lispy-mode and yas-minor-mode:

#+begin_src emacs-lisp
(after! evil-mc
  (add-to-list 'evil-mc-incompatible-minor-modes 'lispy-mode)
  (add-to-list 'evil-mc-incompatible-minor-modes 'yas-minor-mode))
#+end_src

*** Hydra

Copy and paste from: [[https://hungyi.net/posts/hydra-for-evil-mc/][An evil-mc Emacs Hydra]]

One thing sorely lacking in native Emacs is the ability to edit with multiple cursors
like VS Code. Fortunately for Doom Emacs or Evil users, there’s evil-mc. But even with
that installed, all it gives you is a bunch of commands you still have to decide how to
bind them yourself or rely on Doom’s suggested bindings that map everything to the =g z=
prefix for every command.

But I think we can do better. Today, I’m sharing an Emacs =hydra= that I’ve been using
to power up my evil-mc usage. Just put this anywhere in your config.el:

#+begin_src emacs-lisp
(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))
#+end_src

And since I’m using Doom Emacs, I’ve bound it to the prefix =g z= to stay somewhat in line
with the default setup. Note that binding it this way will make this hydra replace *all* of
the previous multiple cursor bindings under =g z=.

#+begin_src emacs-lisp
(map!
 (:when (modulep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))
#+end_src

**** Why Use a Hydra?

A hydra lets us enter and stay in a “multiple cursor creation mode” without having to
press a bunch of prefix keys or modifiers before every command. This fit the way I
used multiple cursors on a conceptual level:

1. Create all the cursors in the appropriate places; then
2. Check if all the cursors are perfect; if they are
3. Start text editing.

Because steps 1 and 2 purely involve multiple cursor stuff, it’s perfectly OK for
some of the regular editing keys to be commandeered for the sole purpose of manipulating
cursors.

And yes, it’s useful to have the movement keys still available when messing around
with cursors, which brings us to...

**** Notable Benefits

1. *Most movement keys are still free to be used while in the hydra.*
   The =:color= is set to =pink= so that keys that are foreign to the hydra are still passed
   through without complaint. I’ve also chosen keys that don’t interfere with basic
   vim movement.

2. *Automatically pause all evil-mc cursors when entering the hydra.*
   I always found it annoying that the cursors could move around while I was setting
   them up. No other editor I’ve used so far has had any (obvious) way of freezing
   the cursors during set up, but this hydra can. You can also control the pausing
   manually by using =p.=

3. *Automatically unfreeze all evil-mc cursors when exiting the hydra,* ready for editing.

4. *Allows easy skipping of matching text without creating cursors* using the =n= and =N= keys.
   This is roughly similar to the regular vim searching behavior, so it’s easier for
   me to remember.

5. *Easy access to correction commands*, like toggle at point =z=, remove last mistake =r=
   or remove all =R= to start again.
   Multiple cursors is messy, and I almost never get it right on the first try, but this
   makes it easy to reset and get back on track using very few keystroke.

6. *Just hold shift to make cursors vertically up and down* with =K= and =J=.
   Skipping is easy too. Just let go of shift and use the regular vim =k= and =j= movement keys.

I’ve left out bindings for commands like =evil-mc-make-and-goto-next-cursor= and
=evil-mc-skip-and-goto-prev-cursor= as well as all of the cursor-specific navigation
keys because I rarely use them right now.

Of course, you’re free to bind them yourself. Might I suggest using some of these
directional keys? =[= =]= =<= =>=.

*** Working With Smartparens

Ref: [[https://hungyi.net/posts/how-to-evil-mc-smartparens/][How to Quickly Get evil-mc Working With Smartparens]]

[[https://philjackson.github.io/elisp/evil-mc/smartparens/emacs/2021/06/05/smartparens-and-evil-mc/][As described here]], when using =evil-mc=, it's very frustrating when a =smartparens=
command works on only the first of the multiple cursors.

Here's how to fix that:

#+begin_src emacs-lisp
(after! (:and evil-mc smartparens)
  (dolist (sp-command '(sp-up-sexp
                        sp-copy-sexp
                        sp-down-sexp
                        sp-join-sexp
                        sp-kill-sexp
                        sp-next-sexp
                        sp-split-sexp
                        sp-wrap-curly
                        sp-wrap-round
                        sp-raise-sexp
                        sp-clone-sexp
                        sp-wrap-square
                        sp-splice-sexp
                        sp-end-of-sexp
                        sp-forward-sexp
                        sp-backward-sexp
                        sp-convolute-sexp
                        sp-transpose-sexp
                        sp-kill-whole-line
                        sp-beginning-of-sexp
                        sp-forward-barf-sexp
                        sp-forward-slurp-sexp
                        sp-backward-barf-sexp
                        sp-backward-slurp-sexp
                        sp-splice-sexp-killing-forward
                        sp-splice-sexp-killing-backward))
    (add-to-list
     'evil-mc-custom-known-commands
     `(,sp-command
       (:default . evil-mc-execute-call)))))
#+end_src

** Evil Escape

I don't use =evil-escape-mode= and I heard it contributes to a typing delay.
So, let's just disable it.

Update: Instead of disabling evil-escape-mode, better just prevent the
installation of the package by removing it, see [[Disabling Packages]].

#+begin_src emacs-lisp :tangle no
(after! evil-escape (evil-escape-mode -1))
#+end_src

** Evil Motion Trainer

Read: [[https://martin.baillie.id/wrote/evil-motion-training-for-emacs/][Emacs Evil Motion Training]]. Github: [[https://github.com/martinbaillie/evil-motion-trainer][evil-motion-trainer]].

Let's install it:
#+begin_src emacs-lisp :tangle packages.el
(package! evil-motion-trainer
  :recipe (:host github
           :repo "martinbaillie/evil-motion-trainer"
           :files ("*.el")))
#+end_src

Now, configure it:
#+begin_src emacs-lisp
(use-package! evil-motion-trainer
  :init
  :config
  (setq evil-motion-trainer-threshold 6
        evil-motion-trainer-super-annoying-mode nil)
  ;; (global-evil-motion-trainer-mode 1)    ; enable
  (global-evil-motion-trainer-mode 0)       ; disable
 )
#+end_src

** Evil Visualstar

- Select something in visual mode with =v= or =V=
- Press =#= (search forward) or =*= (search backward)

See: [[https://emacs.stackexchange.com/questions/52411/evil-star-visualstar-without-moving-the-cursor][Evil visualstart without moving the cursor]], but below does not work. Disable first.
#+begin_src emacs-lisp :tangle no
(after! evil-visualstar
  (defun my/star-keep-position ()
    (interactive)
    (case evil-search-module
      (evil-search (progn
                    (evil-ex-search-word-forward)
                    (evil-ex-search-previous)))
      (isearch (progn
                 (evil-search-word-forward)
                 (evil-search-previous)))))

  (defun my/visualstar-keep-position ()
    (interactive)
    (when (region-active-p)
        (evil-visualstar/begin-search (region-beginning) (region-end) t)
        (case evil-search-module
        (evil-search (evil-ex-search-previous))
        (isearch (evil-search-previous)))))

  (evil-define-key 'normal evil-motion-state-map (kbd "*") 'my/star-keep-position)
  (evil-define-key 'visual evil-visualstar-mode-map (kbd "*") 'my/visualstar-keep-position))
#+end_src

** Evil Exchange

Easy text swap operator, see [[https://github.com/Dewdrops/evil-exchange][evil-exchange]].

First, in visual mode, select text then =gx=. Go to another text to swap with, in visual mode,
select text then =gx= again to swap with the previus text.

** Reference

- [[https://www.baeldung.com/linux/text-objects-in-vim][Text Objects in Vim]].
- [[https://www.youtube.com/watch?v=SIePe-A4rs0][YouTube: vim: Text objects]]
- [[https://www.youtube.com/watch?v=tQKtJyI5cFk][YouTube: vi: Text object motions]]
- [[https://www.youtube.com/watch?v=c4P2hzVPDbY][YouTube: vim: Copyting and moving text]]
- [[https://www.youtube.com/watch?v=E7NBhSsZouc][YouTube: Vim Life Ep 7: Coolest Vim Command]]
- [[https://www.youtube.com/watch?v=H3o4l4GVLW0][Youtube: Vim As Your Editor (1/6): The Basic Vim Movements]]
- [[https://www.youtube.com/watch?v=gSHf_b6AWKc][YouTube: Vim As Your Editor (2/6): Foundation for Speed]]
- [[https://www.youtube.com/watch?v=Q6mr7w0YmkQ][YouTube: Vim As Your Editor (3/6): Horizontal Speed]]
- [[https://www.youtube.com/watch?v=4uPRlnTUlMY][YouTube: Vim As Your Editor (4/6): Vertical Domination]]

To investigate:

- [[https://github.com/yyoncho/evil-repeat-motion][evil-repeat-motion]]

* abo-abo
** avy

*** avy-goto-line

This is my first key mapping effort, ref: [[https://rameezkhan.me/adding-keybindings-to-doom-emacs][Adding keybindings to doom emacs]] and
[[https://github.com/hlissner/doom-emacs/issues/2725][Add keys to evil-easymotion]]. Currently it's not being mapped to any keybinding. So,

#+begin_src emacs-lisp
;; see ~/.emacs.d/modules/editor/evil/config.el
(map! :after evil-easymotion
  :map evilem-map
   "l" #'evil-avy-goto-line
;; "p" #'avy-pop-mark  ; better-jumper-jump-backword (C-o) as general jump backward
)
#+end_src

To browse both local and global mark rings:
#+begin_example
M-x counsel-mark-ring (SPC s r)
#+end_example

*** Avy Can Do Anything

Ref: [[https://karthinks.com/software/avy-can-do-anything/][Avy can do anything]]

**** Kill a candidate word, sexp or line

#+begin_src emacs-lisp
(after! avy
  (defun avy-action-kill-whole-line (pt)
  (save-excursion
      (goto-char pt)
      (kill-whole-line))
  (select-window
  (cdr
      (ring-ref avy-ring 0)))
  t)
  ;;
  (setf (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
        ; (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay     ;; doom default ?X
        )
 )
#+end_src

**** Yank a candidate word, sexp or line

#+begin_src emacs-lisp
(after! avy
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
          (bounds-of-thing-at-point 'line)
        (copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)
  ;;
  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)
  ;;
  (setf ; (alist-get ?y avy-dispatch-alist) 'avy-action-yank             ; doom default ?y
        ; (alist-get ?w avy-dispatch-alist) 'avy-action-copy             ; doom default ?n
        (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line  ; override doom yang-line (?Y)
        )
 )
#+end_src

*** Avy Actions are Awesome!

Ref: [[https://ag91.github.io/blog/2022/04/20/repeat-with-me-avy-actions-are-awesome/][Repeat with me: Avy actions are awesome!]]

To read the article later!

** ivy

[27-Jan-2022] I'm now using =vertico= as the search engine instead of =ivy=.
=vertico= is now also default search engine in Doom.

#+begin_src emacs-lisp :tangle no
(after! ivy
 (setq ivy-height 16
       ivy-count-format "(%d/%d)"    ; display the current and total number in the collection
       counsel-git-cmd "rg --files"
       ;; already defined in doom emacs config
       ;counsel-rg-base-command "rg -i -M 120 --no-heading --line-number --color never %s ."
       ;; https://oremacs.com/2017/08/04/ripgrep/
       counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never '%s' %s"
       )
 ;; i don't like dir buffer.
 (define-key ivy-minibuffer-map (kbd "RET") 'ivy-alt-done)
 )
#+end_src

* Vertico & Co

Vertico is Doom's default completion system: [[https://github.com/hlissner/doom-emacs/tree/master/modules/completion/vertico][Doom Emacs Vertico Module]].

Other Refs:
- [[https://macowners.club/posts/from-ivy-to-vertico/][From Ivy & Counsel to Vertico & Consult]]
- [[https://cestlaz.github.io/post/using-emacs-80-vertico/][Using Emacs Episode 80 Vertico, Marginalia, Consult and Embark]]
- [[https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/][System Crafters: Streamline Your Emacs Completions with Vertico]]
- [[https://irreal.org/blog/?p=9699][Irreal: Ivy to Selectrum]]
- [[https://www.rousette.org.uk/archives/switching-to-selectrum-for-incremental-narrowing-in-emacs/][Switching to Selectrum for incremental narrowing in Emacs]]
- [[https://emacsredux.com/blog/2021/04/19/configuring-minibuffer-completion-in-projectile/][Emacs Redux: Configuring Minibuffer Completion in Projectile]]
- [[https://hungyi.net/posts/doom-emacs-search-replace-project/][Hungyi: How to Do a Project-wide Search and Replace in Doom Emacs]]
- [[https://kristofferbalintona.me/posts/vertico-marginalia-all-the-icons-completion-and-orderless/][Kristoffer Balintona: Vertico, Marginalia, All-the-icons-completion and Orderless]]
- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][karthinks: Fifteen Ways to Use Embark]]

** Project-wide Search and Replace

Reference: [[https://hungyi.net/posts/doom-emacs-search-replace-project/][How to Do a Project-wide Search & Replace in Doom Emacs]].

#+begin_example
SPC s p foo C-; E C-c C-p :%s/foo/bar/g RET Z Z
#+end_example

Entering those keys will replace "foo" with "bar" in your whole project.

** Orderless completion in lsp-mode

Ref: [[https://magnus.therning.org/2024-05-04-orderless-completion-in-lsp-mode.html][Orderless completion in lsp-mode]]

It turns out that /lsp-mode/ messes around with =completion-category-defaults=. So,
#+begin_src emacs-lisp
(lambda()
  (setq-local completion-category-defaults
              (assoc-delete-all 'lsp-capf completion-category-defaults)))
#+end_src

* Org

I have been a fan of the idea of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] for many years, but Org is the first
tool I have encountered which makes it practical. Here are some of the resources I have
found useful in learning it:

- Howard Abrams: [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]], which got me jumpstarted into writing
  code documented with org-mode.
- Nick Anderson: [[https://github.com/nickanderson/Level-up-your-notes-with-Org][Level up your notes with Org]], which contains many useful tips and
  configuration tricks. Nick's recommendation also got me to start looking into Org-mode
  in the first place!
- Sacha Chua: [[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/][Some tips for learning Org Mode for Emacs]], her [[http://pages.sachachua.com/.emacs.d/Sacha.html][Emacs configuration]] and
  many of her [[http://sachachua.com/blog/category/emacs/][other articles]].
- Rainer König: [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][OrgMode Tutorial]] video series.
- System Crafters Youtube: [[https://www.youtube.com/watch?v=AyhPmypHDEw&t=2007s][Gettring Started with Org Roam v2]].
- Peter Prevos: [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][Taking Notes with Emacs Org Mode and Org Roam]].
- Where parallels cross: [[https://ag91.github.io/blog/2021/03/12/find-org-roam-notes-via-their-relations/][Find Org Roam notes via their relations]]

** General Org Configuration

Default directory for Org files.

#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

Hide Org markup indicators such as *bold*, /italic/, etc.
More: [[https://emacstil.com/til/2021/11/26/make-org-emphasis-code-verbatim-bold-look-nicer/][Hide leading/trailing emphasis margers in Org]].

#+begin_src emacs-lisp
(after! org (setq org-hide-emphasis-markers t))
#+end_src

Insert Org headings at point, not after the current subtree (this is enabled by
default by Doom).

#+begin_src emacs-lisp
(after! org (setq org-insert-heading-respect-content nil))
#+end_src

Enable logging of done tasks, and log stuff into the LOGBOOK drawer by default.

#+begin_src emacs-lisp
(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))
#+end_src

Use the special ~C-a~, ~C-e~ and ~C-k~ definitions for Org, which enable some special
behavior in headings.

#+begin_src emacs-lisp
(after! org
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t))
#+end_src

Enable [[https://orgmode.org/manual/Speed-keys.html][Speed Keys]], which allows quick single-key commands when the cursor is placed
on a heading. Usually the cursor needs to be at the beginning of a headline line,
but defining it with this function makes them active on any of the asterisks at
the beginning of the line.

#+begin_src emacs-lisp
(after! org
  (setq org-use-speed-commands
        (lambda ()
          (and (looking-at org-outline-regexp)
               (looking-back "^\**")))))
#+end_src

Disable [[https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L323][electric-mode]], which is now respected by Org and which creates some confusing
indentation sometimes.

#+begin_src emacs-lisp
(add-hook! org-mode (electric-indent-local-mode -1))
#+end_src

Default folding is very noisy, rarely need to see everything expanded.

#+begin_src emacs-lisp
(after! org (setq org-startup-folded 'fold))
#+end_src

Well, TODO and DONE alone are not enough.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "WIP(i)" "|" "DONE(d)" "CANCEL(c)")))))
#+end_src

** Org visual settings

Enable visual line mode in Org mode by default.

#+begin_src emacs-lisp
(add-hook! org-mode :append
           #'visual-line-mode)
#+end_src

Use [[https://github.com/awth13/org-appear][org-appear]] to reveal emphasis markers when moving the cursor over them.

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear)
#+end_src

And enable it automatically on org-mode start-up:

#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t
        org-appear-autokeywords t))
#+end_src

** Org Roam

[24-sep-2022] Seldom use org-roam, so disable first.

*** Configuration

Yes, only for Org Roam v2.

#+begin_src emacs-lisp :tangle no
(setq org-roam-directory "~/project/org-roam"
      +org-roam-open-buffer-on-find-file nil)
#+end_src

*** Front end

Ref: [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]

#+begin_src emacs-lisp :tangle no
(package! websocket)
(package! org-roam-ui
  :recipe (:host github
           :repo "org-roam/org-roam-ui"
           :files ("*.el" "out")))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
    ;; :hook
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Exporting a Curriculum Vitae

Ref: [[https://gitlab.com/zzamboni/vita][Curriculum Vitae with Org-mode]].

=org-cv= is not available on melpa yet, hence, install from the source:

#+begin_src emacs-lisp :tangle packages.el
(package! org-cv
  :recipe (:host gitlab
           :repo "Titan-C/org-cv"
           :branch "master"))
#+end_src

And load it:

#+begin_src emacs-lisp
(use-package! ox-awesomecv
  :after org)
#+end_src

This command to export current org-cv file to latex for further processing.

#+begin_src emacs-lisp
(defun ttk/org-export-to-file-awesomecv-tex ()
  (interactive)
  (let ((outfile (org-export-output-file-name ".tex")))
    (org-export-to-file 'awesomecv outfile)))
#+end_src

** Reveal.js presentations

On major version update on reveal.js, see [[https://www.reddit.com/r/emacs/comments/hiaqdj/doom_emacs_revealjs_does_it_work_for_you/][reveal.js on doom emacs]].

To fix, add this on your org file:
#+begin_example
#+REVEAL_ROOT: file:///path/to/reveal.js
#+end_example

** Org-tree-slide

Ref: [[https://github.com/hlissner/doom-emacs/issues/4646][org-tree-slide-mode bugs]]

#+begin_src emacs-lisp
(after! org-tree-slide
  ;; h-bauer 25-june-2021: When arriving on a subsection, the narrow did not occur as expected.
  ;; The first sub-section was unfolded, the next two where still visible. I could not go further
  ;; with the binding, unless moving the cursor to the next sibling. would then unfold the
  ;; next sibling, but to move to the next section with, I had to move the cursor to the
  ;; last line of the last sub-section.
  ;; After some investigation, I fixed my issue by removing the following advice :
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--hide-first-heading-maybe-a)
  ;; display inline image
  (add-hook 'org-tree-slide-mode-after-narrow-hook
            #'org-display-inline-images)
  ;; this is my own profile
  (defun ttk/org-tree-slide-simple-presentation-profile ()
    (interactive)
    (setq org-tree-slide-header nil
          org-tree-slide-slide-in-effect t))
 )
#+end_src

** Publishing Project

Publishing the website.

Very important, if anything weird then delete entirely this folder:
#+begin_example
$ rm -rf ~/.emacs.d/.local/cache/org-timestamps
#+end_example

Update: 03-May-2024. I'm now using org-theme. So, below is not necessary. Disable.

#+begin_src emacs-lisp :tangle no
(after! org
  ;; Project Tree
  (setq org-publish-project-alist
   '(;;
     ;; SSDC project
     ;;
     ("ssdc-notes"
       :base-directory "~/project/stotok/ssdc/org/"
       :base-extension "org"
       :publishing-function org-html-publish-to-html
       :publishing-directory "~/project/stotok/ssdc/bo/html/"
       :recursive t
       :headline-levels 4             ; Just the default for this project.
       :auto-preamble t)
     ("ssdc-static"
       :base-directory "~/project/stotok/ssdc/org/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/project/stotok/ssdc/bo/html/"
       :recursive t
       :publishing-function org-publish-attachment)
     ("ssdc-org-html-themes"
       :base-directory "~/project/thirdp/org-html-themes/src/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/project/stotok/ssdc/bo/html/src/"
       :recursive t
       :publishing-function org-publish-attachment)
     ("ssdc-org" :components ("ssdc-notes" "ssdc-static" "ssdc-org-html-themes"))
    ;;
    ;; CTDC project
    ;;
    ("ctdc-notes"
      :base-directory "~/project/conti/ctdc/org/"
      :base-extension "org"
      :publishing-directory "~/project/conti/ctdc/bo/html/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 4             ; Just the default for this project.
      :auto-preamble t)
    ("ctdc-static"
      :base-directory "~/project/conti/ctdc/org/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/conti/ctdc/bo/html/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("ctdc-org-html-themes"
      :base-directory "~/project/thirdp/org-html-themes/src/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/conti/ctdc/bo/html/src/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("ctdc-org" :components ("ctdc-notes" "ctdc-static" "ctdc-org-html-themes"))
    ))
  ;; Source code block evaluated during export. I don't want to be asked everytime :)
  (setq org-confirm-babel-evaluate nil)
  )
#+end_src

** Organizing A Book In Org Mode

Reference:
- [[https://medium.com/@lakshminp/publishing-a-book-using-org-mode-9e817a56d144][Publishing a book using org-mode]]
- [[https://www.reddit.com/r/planetemacs/comments/1fv9uj3/pdf_a_quick_guide_on_writing_a_book_with_emacs/][(pdf) A quick guide on writing a book with emacs org-mode]]

And this is list of things of writing with emacs:
- [[https://github.com/thinkhuman/writingwithemacs][Emacs for Writing]]

** Anki Decks with Orgmode

Ref:
- [[https://rgoswami.me/posts/anki-decks-orgmode/][Anki Decks with Orgmode]].
- [[https://yiufung.net/post/anki-org/][Power up Anki with Emacs and more]]

Let's install the package:
#+begin_src emacs-lisp :tangle packages.el
(package! anki-editor
  :recipe (:host github
           :repo "louietan/anki-editor"))
#+end_src

Let's configure it:
#+begin_src emacs-lisp
(use-package! anki-editor
  :after org-noter
  :config
  (setq anki-editor-create-decks t ; Allow anki-editor to create a new deck if it does not exist
        anki-editor-org-tags-as-anki-tags t
   ))
#+end_src

** The Orgtbl Minor mode

Ref: [[https://orgmode.org/manual/Orgtbl-Mode.html#Orgtbl-Mode][The Orgtbl Minor Mode]].
We can toggle the mode with =M-x orgtbl-mode=.

To turn it on by default, for example in Message mode, use:

#+begin_example
(add-hook 'message-mode-hook 'turn-on-orgtbl')
#+end_example

** Table.el
Ref: [[https://github.com/emacs-mirror/emacs/blob/master/lisp/textmodes/table.el][table.el by Takaaki Ota]].
Ref: [[https://emacs.stackexchange.com/questions/38135/wrap-cell-content-in-an-org-mode-table][2 Modes: org-table and table.el]].
Ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Based-Tables.html][Editing Text-based Tables]].
Ref: [[https://emacsnotes.wordpress.com/2022/06/20/how-to-create-a-table-with-multi-paragraph-content-spanned-cells-using-emacs-org-mode/][How to create a Table with multi-paragraph content & spanned cells using Emacs Org Mode]]

* Coding

** Tangle-on-save

Ref:
- [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Zzamboni Coding Section]]
- [[https://github.com/yilkalargaw/org-auto-tangle][Github: org-auto-tangle]]

Install package:
#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

And configure it:
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
   ;; i want nil by default, then set #+auto_tangle: t in each org file
   (setq org-auto-tangle-default nil
    ))
#+end_src

If we want to manual tangle: =M-x org-babel-tangle=.

* Template

** File Template

Doom has file template based on yasnippet when you enable with =:editor file-templates=.

Ref: [[http://www.hoowl.se/auto_inserting_gitignore_templates_in_emacs.html][Auto-insert .gitignore templates in Doome Emacs]].

#+begin_src emacs-lisp
(when (modulep! :editor file-templates)
  ;;
  ;; Ref: http://www.hoowl.se/auto_inserting_gitignore_templates_in_emacs.html
  ;;
  ;; .gitignore templates
  ;; $ mkdir ~/dotdoomemacs/templates
  ;; $ cd ~/dotdoomemacs/templates
  ;; $ git clone https://github.com/github/gitignore
  (defun ttk/template-insert-gitignore()
    (interactive)
    (let* ((dir (concat doom-private-dir "/templates/gitignore/"))
           (files (directory-files dir nil ".*\\.gitignore"))
           (pick (yas-choose-value (mapcar #'file-name-sans-extension files))))
      (insert-file-contents (concat dir (concat pick ".gitignore")))))
  ;; register the template
  (set-file-template! "\\.gitignore$" :trigger 'hanno/template-insert-gitignore :mode 'gitignore-mode)
  ;;
  ;; python templates
  (defun ttk/template-insert-python()
    (interactive)
    (let* ((dir (concat doom-private-dir "/templates/python/"))
           (files (directory-files dir nil ".*\\.py"))
           (pick (yas-choose-value (mapcar #'file-name-sans-extension files))))
      (insert-file-contents (concat dir (concat pick ".py")))))
  ;; register the template
  (set-file-template! "\\.py$" :trigger 'ttk/template-insert-python :mode 'python-mode))
#+end_src

* C/C++

Interesting read:
- [[https://google.github.io/styleguide/cppguide.html#C++_Version][Google C++ Style Guide]], package: [[https://github.com/google/styleguide/blob/gh-pages/google-c-style.el][google-c-style.el]].

Over the years of doing C/C++, here's my favourite settings.

#+begin_src emacs-lisp
(after! cc-mode
  (defconst ttk-c-style
   '(;; gnu        : coding style blessed by FSF for C code in  GNU programs
     ;; stroustrup : the classic Stroustrup style for C++ code.
     ;; linux      : C coding standard for Linux (the kernel).
     ;; user       : special style created by you. It consists of the factory defaults for
     ;;              all the style variables as modified by the customizations.
     (setq c-default-style '((java-mode . "java")
                             (awk-mode  . "awk")
                             (c-mode    . "user")
                             (c++-mode  . "user")
                             (other     . "user")))
     ;; this is for linux kernel and driver project
     (c-set-style (if (and (buffer-file-name) (string-match "~/project/linux" (buffer-file-name)))
                      "linux"
                    "user"))
     (c-hanging-braces-alist     . ((substatement-open after)
                                    (brace-list-open)))
     (c-hanging-colons-alist     . ((member-init-intro before)
                                    (inher-intro)
                                    (case-label after)
                                    (label after)
                                    (access-label after)))
     (c-cleanup-list             . (scope-operator
                                    empty-defun-braces
                                    defun-close-semi))
     (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                    (substatement-open . 0) ; brackets shd be at same identation as the statement they open
                                    (case-label        . 4) ;; 0 ;; 3
                                    (block-open        . 0)
                                    (knr-argdecl-intro . -)))
     (setq-default indent-tabs-mode             nil ; nil uses space, t uses tab. See: https://www.emacswiki.org/emacs/NoTabs
                   tab-width                      4 ; this is only for displaying existing tabs in files
                   c-basic-offset                 4
                   c-indent-level                 4 ; a tab is equivalent to four spaces
                   c-indent-tabs-mode             t ; pressing TAB should cause indentation
                   c-tab-always-indent            t
                   c-comment-only-line-offset     0 ; 4
                   c-continued-statement-offset   4 ; if a statement continues on the next line, indent the continuation by 4
                   c-echo-syntactic-information-p t)
     ) "TTK C Programming Style")
   ;;
   ;; Customizations for all of modes in CC mode
   ;;
   ;; ct hook
   (defun ct-c-mode-common-hook ()
    ;; add ct style and set it for the current buffer
    (c-add-style "TTK" ttk-c-style t)
    ;;
    ;; offset customizations not in ttk-c-style
    ;;
    (c-set-offset 'member-init-intro '++)
    (modify-syntax-entry ?_ "w")   ;; treat '_' as a word constituent
    ;; local binding
    ;; (local-set-key (kbd "C-<") 'c-up-conditional-with-else)
    ;; (local-set-key (kbd "C->") '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count))))
    ;; keybindings for all supported languages.  We can put these in
    ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
    ;; java-mode-map, and idl-mode-map inherit from it.
    ;; (define-key c-mode-base-map "\C-m" 'newline-and-indent)
    )
   ;;
   ;; apply which one to use
   (add-hook 'c-mode-common-hook 'ct-c-mode-common-hook)
   (add-hook 'c++-mode-common-hook 'ct-c-mode-common-hook)
   ;; files *.ipp is c++ source code in UPA
   (setq auto-mode-alist (cons '("\\.ipp$" . c++-mode) auto-mode-alist))
   (setq auto-mode-alist (cons '("\\.[ch].test$" . c-mode) auto-mode-alist))
   ;; this is to override "doom" as c-default-style
   (when (listp c-default-style)
     (setf (alist-get 'c-mode c-default-style) "user")
     (setf (alist-get 'c++-mode c-default-style) "user")
     (setf (alist-get 'other c-default-style) "user"))
  )
#+end_src

Some keybindings.

#+begin_src emacs-lisp
(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("d" . "C Movement")    ;; "c" already taken by ccls-show-caller: modules/lang/cc/config.el
       :desc "ccmode Movement"
        "<" 'c-up-conditional-with-else
        ">" '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count)))
        "A" 'c-beginning-of-defun
        "E" 'c-end-of-defun
        "a" 'c-beginning-of-statement
        "e" 'c-end-of-statement)
#+end_src

* Tagging

** Cscope

Tool for browsing source code, see [[http://cscope.sourceforge.net/][CSCOPE]]. =cscope= package is local package.

#+begin_src emacs-lisp :tangle packages.el
;; Relative paths are expanded to ~/.emacs.d/.local/straight/repos/{local-repo}
;; or ~/.doom.d/{local-repo} -- the first that is found.
(package! xcscope
  :recipe (:local-repo "ttk-cscope"         ; looks for ${DOOMDIR}/ttk-cscope/xcscope.el
           ;; By default, the package manager grabs all *.el files at the root
           ;; of the project and nothing else. To include other files, or
           ;; accommodate unconventional project structures, specify what :files
           ;; you want:
           ;; :files ("*.el" "src/lisp/*.el")

           ;; With ':no-byte-compile t' you can avoid having to run 'doom sync'
           ;; every time you change the package.
           ;; :no-byte-compile t
           ))
#+end_src
#+begin_src emacs-lisp
(use-package! xcscope
  :after prog-mode
  :init
  (setq cscope-do-not-update-database t
        cscope-edit-single-match nil)
  :config
  ;; let cscope minor modes key binding takes priority over evil key bindings
  (evil-make-overriding-map cscope-list-entry-keymap 'normal)
  ;; force update evil keymaps after cscope-list-entry-mode loaded
  (add-hook 'cscope-list-entry-hook #'evil-normalize-keymaps))
#+end_src

Now create new keybindings. "SPC m s" is not currently being used.

#+begin_src emacs-lisp
(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("s" . "cscope")
       :desc "cscope"
        "s" #'cscope-find-this-symbol
        "d" #'cscope-find-global-definition
        "c" #'cscope-find-functions-calling-this-function
        "C" #'cscope-find-called-functions
        "i" #'cscope-find-files-including-file
        "b" #'cscope-display-buffer
        "o" #'cscope-pop-mark
        "a" #'cscope-set-initial-directory
        "A" #'cscope-unset-initial-directory)
#+end_src

#+begin_src emacs-lisp
(after! xcscope
  ;; *cscope* buffer at bottom and get focus automatically
  (set-popup-rule! "^*cscope*$" :side 'bottom :select t :ttl nil))
#+end_src

** Citre

Ref:
- [[https://github.com/universal-ctags/citre][github.com/universal-ctags/citre]]
- [[https://stackoverflow.com/questions/23703585/how-to-use-gtags-v-to-create-index-but-skipping-some-subdirectories][How to use gtags -v to create index but skipping some subdirectories]]

I'm going to use =gnu global= as citre's backkend, so:
#+begin_example
$ sudo apt install global
#+end_example

The build-in parser for =global= already support C, Yacc, PHP4 and assembly.
To support C++ (and others) =global= need:

- python
- Pygments
  #+begin_example
  $ pip3 install Pygments
  #+end_example
  Or,
  #+begin_example
  $ sudo apt install python-pygments -y
  #+end_example

- ctags
  #+begin_example
  $ sudo apt install universal-ctags -y
  #+end_example
  Or, =ubuntu 16.04=:
  #+begin_example
  $ sudo snap install universal-ctags
  #+end_example
- Setup env var
  #+begin_example
  $ export GTAGSCONF="${HOME}/project/dotdoomemacs/ttk-cscope/local/xcscope/gtags.conf"
  $ export GTAGSLABEL=native-pygments
  #+end_example
- Generate TAG
  #+begin_example
  $ gtags -v --compact
  #+end_example
  Or,
  #+begin_example
  $ fd-soc-gtags-indexer.sh
  #+end_example

Now let's get =citre=:

#+begin_src emacs-lisp :tangle packages.el
(package! citre
  :recipe (:host github
           :repo "universal-ctags/citre"))
#+end_src

Configuration:
#+begin_src emacs-lisp
(use-package! citre
  :init
  ;; code here will run immediately
  ;; this is needed in :init block for lazy load to work
  (require 'citre-config)
  :config
  ;; code here will run after the package is loaded
  (setq
   ;;;;; set these if readtags/ctags is not in your PATH
   ;; citre-readtags-program "/usr/bin/readtags"
   ;; citre-ctags-program "/usr/bin/ctags"
   ;;;;; set these if gtags/global is not in your PATH and you want
   ;;;;; to use global backend
   ;; citre-gtags-program "/usr/bin/gtags"
   ;; citre-global-program "/usr/bin/global"
   ;;;;; set this if you use project management plugin like projectile.
   ;;;;; it's use for things like displaying paths relatively, see it's doctring.
   citre-project-root-function #'projectile-project-root
   ;;;;; if you only want the auto enabling citre-mode behavior to work for
   ;;;;; certain mode (like `prog-mode'), set it like this:
   citre-auto-enable-citre-mode-modes '(prog-mode)
   ;;;;; set this if you'd like to use ctags options generated by citre
   ;;;;; directly, rather than further editing them
   citre-edit-ctags-options-manually nil
   ;;;;; yes, per project root
   citre-use-project-root-when-creating-tags t
   ;;;;; not sure below ,,, later check
   citre-tags-imenu-create-tags-file-threshold nil
   ;;;;; change order to be global the first
   citre-completion-backends '(global tags)
   citre-find-definition-backends '(global tags eglot)
   citre-find-reference-backends '(global eglot)
   citre-tags-in-buffer-backends '(global tags)
   ;;;;; use dashes
   citre-peek-use-dashes-as-horizontal-border t
  ))
#+end_src

Now let's integrate citre-jump-back to xref-go-back. Doom way of course:

#+begin_src emacs-lisp
(advice-add #'citre-jump :around #'doom-set-jump-a)
#+end_src

Now create keybindings. "SPC m c" is not currently being used.

#+begin_src emacs-lisp
(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("c" . "citre")
       "s" #'citre-jump-to-reference
       "S" #'citre-query-jump-to-reference
       "d" #'citre-jump
       "D" #'citre-query-jump
       "o" #'citre-jump-back
 )
#+end_src

* Python

Interesting read:
- [[https://google.github.io/styleguide/pyguide.html][Google Python Style Guide]]

** pipenv
*** Python Launcher
**** Debian
#+begin_example
$ python3 --version
Python 3.9.1
$ python2 --version
Python 2.7.18
#+end_example

**** Windows
#+begin_example
C:> py --list
 -V:3.11 *        Python 3.11 (64-bit)
 -V:2.7
C:> py -3.11 --version
Python 3.11.1
C:> py -2.7 --version
Python 2.7.18
#+end_example

*** Python User Base Directory

Ref: [[https://docs.pipenv.org/en/latest/advanced.html][Pragmagic Installation of Pipenv]]

Make sure user base directory is in the PATH of your system.

**** Debian
#+begin_example
$ python3 -m site --user-base
/home/stotok/.local
#+end_example

Add it to system's PATH: =/home/stotok/.local/bin=

**** Windows
#+begin_example
C:> py -3.11 -m site --user-site
C:\Users\uia53572\AppData\Roaming\Python\Python311\site-packages
#+end_example

Replace =site-packages= with =Scripts= and add it to system's PATH:
=C:\Users\uia53572\AppData\Roaming\Python\Python311\Scripts=

*** Install

**** brew (system-wide)
#+begin_example
$ brew install pipenv
#+end_example

**** debian (system-wide)

For debian bookworks:
#+begin_example
$ sudo apt install python3-dev
$ sudo apt install python3-wheel
$ sudo apt install python3-virtualenv
$ sudo apt install pipenv
#+end_example

For debian bullseye:
#+begin_example
$ sudo apt -y purge python3-dev
$ sudo pip3 install pipenv
$ sudo apt -y purge python3-virtualenv
$ sudo apt -y purge python3-virtualenv-clone
$ sudo pip3 install virtualenv
#+end_example

**** Windows
- wheel (system wide: C:\Python311\Scripts)
#+begin_example
C:\Users\uia53572>C:\Python311\Scripts\pip3 install wheel
Collecting wheel
  Downloading wheel-0.38.4-py3-none-any.whl (36 kB)
Installing collected packages: wheel
  WARNING: The script wheel.exe is installed in 'C:\Python311\Scripts' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
Successfully installed wheel-0.38.4
#+end_example

- virtualenv (system wide: C:\Python311\Scripts)
#+begin_example
C:\Users\uia53572>C:\Python311\Scripts\pip3 install virtualenv
Collecting virtualenv
  Downloading virtualenv-20.17.1-py3-none-any.whl (8.8 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.8/8.8 MB 12.9 MB/s eta 0:00:00
Collecting distlib<1,>=0.3.6
  Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 468.5/468.5 kB 5.9 MB/s eta 0:00:00
Collecting filelock<4,>=3.4.1
  Downloading filelock-3.9.0-py3-none-any.whl (9.7 kB)
Collecting platformdirs<3,>=2.4
  Downloading platformdirs-2.6.2-py3-none-any.whl (14 kB)
Installing collected packages: distlib, platformdirs, filelock, virtualenv
  WARNING: The script virtualenv.exe is installed in 'C:\Python311\Scripts' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
Successfully installed distlib-0.3.6 filelock-3.9.0 platformdirs-2.6.2 virtualenv-20.17.1
#+end_example

- pipenv (user wide: C:\Users\uia53572\AppData\Roaming\Python\Python311\Scripts)
#+begin_example
C:\Users\uia53572>C:\Python311\Scripts\pip3 install --user pipenv
Collecting pipenv
  Downloading pipenv-2023.2.4-py3-none-any.whl (2.9 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.9/2.9 MB 16.6 MB/s eta 0:00:00
Collecting certifi
  Downloading certifi-2022.12.7-py3-none-any.whl (155 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 155.3/155.3 kB ? eta 0:00:00
Requirement already satisfied: setuptools>=36.2.1 in c:\python311\lib\site-packages (from pipenv) (65.5.0)
Collecting virtualenv-clone>=0.2.5
  Downloading virtualenv_clone-0.5.7-py3-none-any.whl (6.6 kB)
Requirement already satisfied: virtualenv in c:\python311\lib\site-packages (from pipenv) (20.17.1)
Requirement already satisfied: distlib<1,>=0.3.6 in c:\python311\lib\site-packages (from virtualenv->pipenv) (0.3.6)
Requirement already satisfied: filelock<4,>=3.4.1 in c:\python311\lib\site-packages (from virtualenv->pipenv) (3.9.0)
Requirement already satisfied: platformdirs<3,>=2.4 in c:\python311\lib\site-packages (from virtualenv->pipenv) (2.6.2)
Installing collected packages: virtualenv-clone, certifi, pipenv
  WARNING: The script virtualenv-clone.exe is installed in 'C:\Users\uia53572\AppData\Roaming\Python\Python311\Scripts' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The scripts pipenv-resolver.exe and pipenv.exe are installed in 'C:\Users\uia53572\AppData\Roaming\Python\Python311\Scripts' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
Successfully installed certifi-2022.12.7 pipenv-2023.2.4 virtualenv-clone-0.5.7
#+end_example

Then add to the PATH:
#+begin_example
1: Execute in DOS command: "C:>sysdm.cpl"
2: Go to advanced tab, open "Environment Variables..."
3: Edit PATH.  Add "C:\Users\uia53572\AppData\Roaming\Python\Python311\Scripts"
#+end_example

Reboot your laptop.

*** .bashrc

#+begin_example
### with this, pipenv will now place the virtualenv inside
### the project folder, emacs will see it and activate it
# export PIPENV_VENV_IN_PROJECT=1
### change to WORKON_HOME due to multi env windows and WSL
export WORKON_HOME=/mnt/d/DSUsers/uia53572/.venvs/linux
#+end_example

*** windows environment variable
#+begin_example
1: Execute in DOS command: "C:>sysdm.cpl"
2: Go to advanced tab, open "Environment Variables..."
3: New User Variable
4: Variable Name: "WORKON_HOME", Variable value: "D:\DSUsers\uia53572\.venvs\windows"
#+end_example

Then reboot your laptop

*** Create/Activate virtual environment

**** Spawn a shell in a virtual environment
#+begin_example
$ cd <your project root>
#+end_example

***** First time (create virtual env)
#+begin_example
$ pipenv shell --python 3.7 (first time to create venv)
#+end_example

***** Next time (virtual env already created, ie =Pipfile= already exist)
#+begin_example
$ pipenv shell
#+end_example

**** Install pacakges

***** First time
#+begin_example
$ pipenv install autoflake flake8 epc importmagic 'python-language-server[all]' 'ptvsd>=4.2'
$ pipenv install pyls-isort pyls-mypy pyls-black
$ pipenv install <python library needed by your project>
#+end_example

***** Next time (after cloning from git repo, install from Pipfile and Pipfile.lock)
#+begin_example
$ pipenv install
#+end_example

**** Execute python program

***** When in virtual env shell
#+begin_example
(venv) $ python main.py
#+end_example

***** When not in virtual env shell
#+begin_example
$ pipenv run python main.py
#+end_example

* Magit

References:
- Youtube: [[https://www.youtube.com/watch?v=_zfvQkJsYwI][System Crafters: An Introduction to the Ultimage Git Interface, Magit!]]
- Youtube: [[https://www.youtube.com/watch?v=zM7K1y4h6UQ][System Crafters: Fix Your Git Commits Like a Rebase Expert with Magit]]
- Youtube: [[https://www.youtube.com/watch?v=qPfJoeQCIvA][System Crafters: 9 Techniques to Boost Your Git Workflow with Magit]]
- [[https://www.lvguowei.me/post/magit-rebase/][Guowei Lv: Magit Tutorial - Rebase (Part I)]]
- [[https://www.lvguowei.me/post/magit-rebase-2/][Guowei Lv: Magit Tutorial - Rebase (Part II)]]
- [[https://www.emoses.org/posts/emacs-custom-auth-source/][Building a custom emacs auth-source]]

Some configuration:

#+begin_src emacs-lisp
(after! magit
  (setq-default +magit-open-windows-in-direction 'down))
#+end_src

** Magit and Gerrit

Push to gerrit:
#+begin_example
p r "origin" RET "HEAD:refs/drafts/master"
p r "origin" RET "HEAD:refs/for/master"
#+end_example

** Blame

#+begin_example
M-x magit-blame-addition (SPC g B)
#+end_example

Press =q= to quit from the blame view.

** Blamer

Ref: [[https://github.com/Artawower/blamer.el][Github: blamer.el]]

To show git blame info for current line. This is another package
not from magit, and it's already in melpa. But I prefer latest:

#+begin_src emacs-lisp :tangle packages.el
(package! blamer
  :recipe (:host github
           :repo "artawower/blamer.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! blamer
  :bind
  :defer 20
  :custom
    (blamer-idle-time 1.0)
    (blamer-min-offset 70)
    (blamer-author-formatter "%s ")
    (blamer-datetime-formatter nil)     ; no need to show time
    (blamer-prettify-time-p nil)        ; no need show 2days ago/yesterday etc
    (blamer-type 'both)
    (blamer-uncommitted-changes-message "NOT COMMITTED")
    (blamer-max-lines 30) ; if > 30 lines selected, blamer will not execute git commands
    (blamer-max-commit-message-length 40) ; will be truncated if more than 40 chars
    (blamer-smart-background-p nil)       ; prefer not blamer face
    (blamer-border-lines nil)             ; borders will not present
    ;; (blamer-force-truncate-long-line nil) ; when truncate-lines mode is disabled you can
    (blamer-show-avatar-p nil)
    (blamer-enable-async-execution-p nil) ; this is the culprit. Must be nil !!!
  :config
    (global-blamer-mode 1))
#+end_src

** Forge

Reference:

- [[https://magit.vc/manual/forge.html][Forge User and Developer Manual]]
- [[https://docs.doomemacs.org/v21.12/modules/tools/magit/][doom emacs: forge setting]].
- [[https://gist.github.com/Azeirah/542f1db12e3ef904abfc7e9c2e83310e][Magit forge for Gitlab in Doom Emacs]].
- [[https://github.com/magit/forge/wiki/Tips-and-Tricks#using-ssh-identities][Forge: Tips and Tricks]]
- [[https://www.reddit.com/r/emacs/comments/1afr34c/i_love_magit_forges/][reddit: Read this for workflow, code-review patch, etc]]

Pre-requisite: GnuPG is setup and running within emacs. See: [[personal_info_gpg][Personal Info and GPG]].

- Create a token for your forge ::
  + Github: [[https://github.com/settings/tokens]]
    - Requires: =repo=, =user= and =read:org= scopes
  + Gitlab: TBD

- Register your username for your forge ::
  #+begin_example
  $ git config --global github.user USERNAME
  #+end_example

- Add the following to your =~/.authinfo.gpg= ::
  Replace =USERNAME= and =TOKENSECRET= with yours:
  #+begin_example
  machine api.github.com login USERNAME^forge password TOKENSECRET
  #+end_example

- Add a remote name that Forge can understand ::
  See [[https://magit.vc/manual/forge/Repository-Detection.html][Forge Repository Detection]].

  Add a new remote name =upstream= that Forge understand it:
  #+begin_example
  $ git remote add upstream https://github.com/gandalf/dotdoomemacs.git
  #+end_example

  Pay attention the above format, to use =/= instead of =:= before =gandalf=.
  And =remote-url= name must be =github.com=.

  Or,

  #+begin_example
  $ git remote add upstream git@github.com:gandalf/dotdoomemacs.git
  #+end_example

  + Note ::
    - =remote-url= must be =github.com=
    - I guess it's using =ssh= protocol, but, I don't need to setup
      /ssh key/ in =~/.ssh/config=:
      #+begin_example
      Host github.com
          IdentityFile  ~/.ssh/your_private_key
      #+end_example
      However, =push= remote =upstream= is allowed via magit. I'm not sure
      how. Maybe via the =token=?

- Startup your magit ::
  #+begin_example
  M-x magit-status
  #+end_example

  + Firstly, forge-pull to pull topic from forge repository ::
    If there is pull request, it will be shown:
    #+begin_example
    M-x forge-pull

    Head:     master Update lah
    Merge:    gitpi/master Update lah

    Recent commits
    571fae2 master gitpi/master github/master Update lah
    b1e58e3 Update upstrame

    Pull requests (1)
    #+end_example

  + List all topics: =@ f f= ::
    This will list all topics.

  + Forge delete local topic ::
    After pull request is merged, by default the info is still in local database
    albeit with marking 'merged'. If you don't want to see it:

    #+begin_example
    M-x forge-remove-topic-locally
    #+end_example

- How to Create Pull Request ::

  Ref:

  + Youtube: [[https://www.youtube.com/watch?v=fFuf3hExF5w][Zaiste: Emacs Magit with Forge for Issuing Pull Requests]]
  + [[https://lahtela.me/2020/08/11/using-forge-and-pull-requests.html][Using Magit Forge with Github Pull Request]]

  Once you have fetched forge topics and populated the pull requests section,
  you can go into the branch transient and there should be options for checking
  out a pull request or creating a branch based of a pull request (f and F on mine,
  I think it's the default). Pull requests will also become a target for merges
  and rebasing. They'll be named either pullreq/ followed by the number or the
  branch name prefixed by the remote.

  + Step-1 :: Create local feature branch off from a branch where you want to
    merge later.
    #+begin_example
    $ git checkout -b feature/ticket-01
    #+end_example
    More often than not, this is my case: In master branch, directly modifying
    file and commit, forgetting to create a feature branch. But no worry, go to
    magit status and =? b s= (checkout a new spin-off):
    #+begin_example
    Checkout
        s new spin-off
    #+end_example
    then give the new branch a name =feature/ticket-01=. Magit will immediately checkout
    to it, and the master branch will be reset back to the original before
    the new commits.

  + Step-2 :: Make some changes and push the local feature branch to remote
    =upstream= branch (same name better).
    #+begin_example
    $ git commit -m "initial changes"
    $ git push -u upstream feature/ticket-01
    #+end_example
    Or, from magit status buffer: =? P u= (@{upstream}, creating it)
    #+begin_example
    Push 'feature/ticket-01' to
      p pushRemote, setting that
      u @{upstream}, creating it
      e elsewhere
    #+end_example
    Then magit will popup
    #+begin_example
    Set upstream of 'feature/ticket-01' and push there:
      upstream/master
      gitpi/master
      gitpi/feature/ticket-01
      upstream/feature/ticket-01
    #+end_example
    You select =upstream/feature/ticket-01=.

  + Step-3 :: Create PR for the current repository (=forge-create-pullreq=). Fire up
    magit forge menu:
    #+begin_example
    Create
      c i issue
      c p pull-request
      c u pull-request from issue
      c r Review pull request
      c f fork or remote
    #+end_example
    Then you select =c p=.

    Then follow instruction. =Source= is =upstream/feature/ticket-01=, =Target= is =upstream/master=.

  + Step-4 :: Make some changes locally and new commit (not commit ammend), and push
    to the same remote =upstream= branch earlier.
    #+begin_example
    $ git commit -m "further changes"
    $ git push upstream feature/ticket-01
    #+end_example
    Or, in magit buffer (=@ p p=: pushRemote, setting that):
    #+begin_example
    Push 'feature/ticket-01' to
      p pushRemote, setting that
      u @{upstream}, creating it
      e elsewhere
    #+end_example
    Magit will popup:
    #+begin_example
    Set branch.feature/ticket-01.pushRemote and push there:
      gitpi
      sshgithub
      upstream
    #+end_example
    Select: =upstream=

    The new commit will be automatically into the commits of the PR. So, now the
    PR contains 2 commits. You can make further changes locally, commit and push
    to the same remote =upstream= branch as many as you want.

*** How to Merge Pull Request

Ref:
- Youtube: [[https://www.youtube.com/watch?v=Qj4eRccsos8][Zaiste: Emacs Magit with Forge for merging Pull Requests]]
- [[https://github.com/magit/forge/issues/96][github forge: possible to merge PR's from magit? #96]]

Forge has decided to not add a command to merge without creating a branch first
because its a good thing to do some review in Magit before doing so. On the other
hand since the pr's commits are now listed when viewing the pr, that is possible
without creating a branch first. Then again you might want to rebase and/or make
small changes and for that you need a branch.

Please try using the "create branch and then merge that" approach, and how it
work for you.

+ Step-1 :: In magit status buffer, create a local branch from pull-request (=b F=).
  If you are the one who also previously the one created the pull-request, then
  your existing local branch name will be reused. However, pay attention to:
  #+begin_example
  Head:        feature/ticket-01 further changes
  Rebase:      master blah blah blah
  Push:        upstream/feature/ticket-01 further changes
  #+end_example
  The HEAD is now pointing to your local branch and it tracks upstream branch.
+ Step-2 :: Now you can do code review locally.
+ Step-3 :: Push local branch =feature/ticket-01= to remote =upstream/master=. It will
  merge the push request to remote master branch.
+ Step-4 :: Refresh local forge dababase with =M-x forge-pull=.
+ Step-5 :: Checkout to local =master= branch and pull remote =upstream/master=
  into your local =master= branch.
+ Step-7 :: Now you can delete local =feature/ticket-01= as well as remote =upstream/feature/ticket-01=.

** Code Review

Ref:
- [[https://github.com/wandersoncferreira/code-review][github: wandersoncferreira/code-review]].
- [[https://www.reddit.com/r/emacs/comments/1afr34c/i_love_magit_forges][This fork/branch has important fix. Take it.]]

Already enabled when choosing =+forge=.

However, see this:
- [[https://github.com/magit/forge/pull/266][forge: Code review support #266]]

** Github Development Model

*** Add Collaborators

This is what sometimes called =user= of your repository.

*** Managing a branch protection rule

Ref: [[https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule][github: Managing a branch protection rule]].

*** Workflow

1. Create local branch off from =master=, eg. =feat-05=.
2. Modify and commit.
3. Push to remote branch with same name: =sshgithub/feat-05=.
4. asdf

* Project Management

** project.el

*** Overriding the project.el project directory

Ref: [[https://michael.stapelberg.ch/posts/2021-04-02-emacs-project-override/][Emacs: overriding the project.el project directory]].

#+begin_src emacs-lisp
(defun ttk-project-override (dir)
  (let ((override (locate-dominating-file dir ".project.el")))
    (if override
      (cons 'vc override)
      nil)))

(after! project
  (add-hook 'project-find-functions #'ttk-project-override))
#+end_src

Now, we can use touch .project.el in any directory to make
=.project.el= recognize the directory as project root!

** Projectile

*** Customization

#+begin_src emacs-lisp
(after! projectile
 ;; alien method need external utility (unixes), and fast.
 ;; it ignores the content of .projectile, but read .gitignore
 ;; totok 11-nov-2018: new method by default: turbo-alien
 (setq projectile-indexing-method 'alien) ; long live 'ripgrep'
 ;; native method is portable but slow. it reads the content of .projectile
 ;; (setq projectile-indexing-method 'native)
 (setq projectile-enable-caching t)
 ;; disable remote file exists cache
 ;;(setq projectile-file-exists-remote-cache-expire nil)
 (setq ;; enable remote file exists cache 10 minutes
   projectile-file-exists-remote-cache-expire (* 10 60)
   projectile-file-exists-local-cache-expire (* 10 60))
 ;; change default display on modeline (don't do it for spacemacs)
 ;;(setq projectile-mode-line '(:eval (format " P:%s" (projectile-project-name))))
 ;; (setq projectile-mode-line "Projectile")

 ;; (defadvice projectile-project-root (around ignore-remote first activate)
 ;;   (unless (file-remote-p default-directory) ad-do-it))

 ;;; by default, doom emacs use ivy (update 27-Jan-2022: now default is vertico)
 ;;; so, let follow default doom setting
 ;; (setq projectile-completion-system 'ivy) ; it's nice (from swiper package)
 ;;; tell projectile to not try and find the file on the remote SVN server and
 ;;; instead search locally, see https://github.com/bbatsov/projectile/issues/520
 (setq projectile-svn-command "find . -type f -not -iwholename '*.svn/*' -print0")
 ;; require presence of project root, otherwise current directory is the project root
 ;; other options: 'prompt or nil
 (setq projectile-require-project-root t)
 ;; don't want automatic project detection, ie i want manually a project
 ;; by a function called projectile-add-known-project, bound to "SPC p a"
 (setq projectile-track-known-projects-automatically nil)
 ;;
 ;; But doesn't work with indexing method alien nor turbo-alien
 ;; nvm, use rg to index and ignored directories put inside .rgignore
 (with-eval-after-load 'projectile
   ;; 29-Oct-2023. Find out that there is a sequence on how projectile search
   ;; a project root. https://docs.projectile.mx/projectile/projects.html#customizing-project-detection
   ;; So, for my case just add a file '.projectile' at my project root folder is sufficient because
   ;; ".repo" does not seem to be priority than ".git" for example
   (add-to-list 'projectile-project-root-files-bottom-up ".repo")
   ;; ignored directories
   (add-to-list 'projectile-globally-ignored-directories "tests")
   (add-to-list 'projectile-globally-ignored-directories ".repo")
   (add-to-list 'projectile-globally-ignored-directories ".venv")
   ;; ignored files
   (add-to-list 'projectile-globally-ignored-file-suffixes ".d")
   (add-to-list 'projectile-globally-ignored-file-suffixes ".o")
   ;; somehow
   (setq projectile-project-root-files (delete "setup.py" projectile-project-root-files))
   (setq projectile-project-root-files (delete "requirements.txt" projectile-project-root-files))
   )
 ;;
 ;; Use ripgrep to index files to be used by projectile
 ;; See: https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile/16499
 ;;
 ;; Default rg arguments
 ;; https://github.com/BurntSushi/ripgrep
 ;;
 ;; totok 20240309 remove folow symlink for avic3, due to symline oe-logs/ and oe-works/
 ;;      "--follow"                          ; follow symlinks

 (when (executable-find "rg")
   (message "Projectile use rg to generate project files.")
   (progn
     (defconst ttk/rg-arguments
       `("--line-number"                     ; line numbers
         "--smart-case"
         "--mmap")                           ; apply memory map optimization when possible
       "Default rg arguments used in the functions in `projectile' package.")
     ;;
     (defun ttk/advice-projectile-use-rg (&rest _args)
       "Always use `rg' for getting a list of all files in the project."
       (let* ((prj-user-ignore-name (expand-file-name
                                     (concat ".ignore." user-login-name)
                                     (projectile-project-root)))
              (prj-user-ignore (when (file-exists-p prj-user-ignore-name)
                                 (concat "--ignore-file " prj-user-ignore-name))))
         (mapconcat #'shell-quote-argument
                    (if prj-user-ignore
                        (append '("rg")
                                ttk/rg-arguments
                                `(,prj-user-ignore)
                                '("--null" ;Output null separated results
                                  ;; Get names of all the to-be-searched files,
                                  ;; same as the "-g ''" argument in ag.
                                  "--files"))
                      (append '("rg")
                              ttk/rg-arguments
                              '("--null"
                                "--files")))
                    " ")))
     (advice-add 'projectile-get-ext-command :override #'ttk/advice-projectile-use-rg)))
)
#+end_src

*** Keeping Projectile's Cache Tidy

Ref: [[https://magnus.therning.org/2022-01-30-keeping-projectile's-cache-tidy.html][Keeping Projectile's cache tidy]]

Removing entries in the cache that no longer exist on disk.

#+begin_src emacs-lisp
(defun ttk/projectile-extra-tidy-projects ()
  (interactive)
  (let ((missing-dirs (seq-remove 'file-directory-p projectile-known-projects)))
    (seq-do 'projectile-remove-known-project missing-dirs)
    (message "Tidied %d projects" (length missing-dirs))))
#+end_src

Then, hard delete =~/.emacs.d/.local/cache/treemacs-persist=.

** Bookmark in Project

Ref: [[https://gitlab.com/ideasman42/emacs-bookmark-in-project][emacs-bookmark-in-project]].

#+begin_src emacs-lisp :tangle packages.el
(package! bookmark-in-project)
#+end_src

Let's do some configuration.
#+begin_src emacs-lisp
(use-package! bookmark-in-project
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
)

(map! :leader
      :desc "bookmark-in-project-jump"
      :g "SPC" nil                      ; firstly, unbind default doom binding
      (:nv "SPC" #'bookmark-in-project-jump))
#+end_src

Note: To create a bookmark, do as usual with doom way =SPC Enter=.

* Remote File Editing
** Using Local Emacs from a Remote Host

Ref: [[https://irreal.org/blog/?p=9457][irreal.org/blog/?p=9457]] and [[https://mina86.com/2021/emacs-remote/][Emacs Remote]].

<TODO>

** Tramp

Ref: [[https://helpdeskheadesk.net/help-desk-head-desk/2021-05-19/][A Few TRAMP Tricks]]

#+begin_src emacs-lisp
;;
;; TRAMP
;;
;; SSH WITH PUBLIC KEY
;; 1. Add to ~/.ssh/config
;;        Host myhost
;;             Hostname myhost.abc.com
;;             ... <as usual>
;;             IdentityFile ~/.ssh/id_rsa_yours_blah
;; 2. $ eval $(ssh-agent -s)
;; 3. $ ssh-add ~/.ssh/id_rsa_blah
;; 4. From emacs:
;;        C-x C-f /ssh:yourusername@myhost:~/somefile.txt
;;
;; Common cause of tramp access to remote ssh timeout is that remote host has
;; an unconventional prompt (which tramp can't parse).
;; To fix, in your shell config on the remote machine:
;;
;;     if [[ "$TERM" == "dumb" ]];; then
;;       unset zle_bracketed_paste
;;       unset zle
;;       PS1='$ '
;;       return
;;     fi
;;
(after! tramp
 (tramp-set-completion-function "ssh"
                                '((tramp-parse-sconfig "/etc/ssh_config")
                                  (tramp-parse-sconfig "/etc/ssh/ssh_config")
                                  (tramp-parse-sconfig "~/.ssh/config")))
 (setq tramp-default-method "ssh")
 (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
 ;; Only for debugging slow tramp connections
 ;; (setq tramp-verbose 7)
 ;;
 ;; Skip version control for tramp files
 (setq vc-ignore-dir-regexp
       (format "\\(%s\\)\\|\\(%s\\)"
               vc-ignore-dir-regexp
               tramp-file-name-regexp))
 ;; Turn off auto-save for tramp files
 (add-to-list 'backup-directory-alist
              (cons tramp-file-name-regexp nil))
 ;; Use ControlPath from .ssh/config
 (setq tramp-ssh-controlmaster-options "")
 ;; Disable ssh password cache expiration
 (setq password-cache-expiry nil)
 ;; When autosave kickec in, save here ...
 (setq tramp-auto-save-directory "~/tmp/tramp/")
 ;; Let's see this chunksize value
 (setq tramp-chunksize 2000))
#+end_src

* Plantuml

Diagram to confuse people more, see: [[https://plantuml.com/][PlantUML in a nutshell]].

Useful references:
- [[https://scripter.co/notes/plantuml/][Scripter: Collection of PlantUML snippets that I find useful]]
- [[https://www.augmentedmind.de/2021/01/03/plantuml-tutorial-diagrams-as-code/][AugmentedMind: PlantUML tutorial to create diagram as code]]

** Need =dot= utility from =graphviz= package

See [[https://www.graphviz.org/][graphviz.org]].

#+begin_example
$ sudo port install graphviz (macport)
$ brew install graphviz (homebrew)
$ sudo apt-get install graphviz (debian)
     then set env var:
$ export GRAPHVIZ_DOT="/opt/local/bin/dot" (macport)
$ export GRAPHVIZ_DOT="/opt/local/bin/dot" (homebrew)
$ export GRAPHVIZ_DOT="/usr/bin/dot" (debian)
#+end_example

** =plantuml-mode=

See [[https://github.com/skuro/plantuml-mode][skuro/plantuml-mode]]. To display plantuml.jar version:

#+begin_example
$ java -jar plantuml.jar -version
PlantUML version 1.2021.01 (Tue Feb 02 15:55:08 SGT 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US

PLANTUML_LIMIT_SIZE: 4096

Dot version: dot - graphviz version 2.43.0 (0)
Installation seems OK. File generation OK
#+end_example

#+begin_src emacs-lisp
;; see doom-emacs/modules/lang/plantuml/packages.el
(use-package! plantuml-mode
  :init
  (setq plantuml-jar-path (format "%s/plantuml/plantuml-1.2024.7.jar" (getenv "DOOMDIR"))
        org-plantuml-jar-path (format "%s/plantuml/plantuml-1.2024.7.jar" (getenv "DOOMDIR"))
        plantuml-indent-level 3
        ;; See: https://github.com/skuro/plantuml-mode/issues/46
        ;; we can save *PLANTUML Preview* buffer to a file with command:
        ;; - C-c C-c  (Turning the display mode to text)
        ;; - SPC f s  (M-x save-buffer)
        ;; - Keyin filename
        ;; Supported format: "svg", "png", "txt" (ascii art)
        plantuml-output-type "svg")
  :config
  (setq plantuml-default-exec-mode 'jar))
  ;; enable plantuml-mode for PlantUML files
  (setq auto-mode-alist (cons '("\\.plantuml$"     . plantuml-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.[uU][mM][lL]$" . plantuml-mode) auto-mode-alist))
#+end_src

** If you'd like to edit =dot file= directly

See: [[https://github.com/ppareit/graphviz-dot-mode][ppareit/graphviz-dot-mode]].

#+begin_src emacs-lisp :tangle packages.el
(package! graphviz-dot-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! graphviz-dot-mode)
#+end_src

* Treemacs

Enabled via doom module =:ui treemacs=.

By default, it's width is locked. To toggle, press =tw=.

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-width 20
        ;; switch to treemacs with keyboard: https://github.com/doomemacs/doomemacs/issues/1177
        treemacs-is-never-other-window nil)
  ;; enable follow mode
  (treemacs-follow-mode t))
#+end_src

** treemacs-projectile

Ref: [[https://ruivieira.dev/doom-emacs.html][ruivieira:DOOM Emacs]].

To guarantee that when moving to a buffer of a different =projectile= project,
the =treemacs= tree will reflect that.

#+begin_src emacs-lisp
(after! treemacs-projectile
  (treemacs-project-follow-mode t))
#+end_src

** =lsp-treemacs=

Integrated by =:ui (treemacs +lsp)=.

Ref: https://github.com/emacs-lsp/lsp-treemacs

Calltree is nice!

#+begin_src emacs-lisp
(after! lsp-treemacs
  (setq lsp-treemacs-theme "Iconless")  ; no need icon, confusing
  ;; (setq lsp-treemacs-theme "Eclipse")
  (lsp-treemacs-sync-mode 1))
#+end_src

* Language Server Protocol
** LSP

The world is moving towards [[https://langserver.org/][Language Server Protocol]], so are we.

- For Doom LSP: see: [[https://github.com/hlissner/doom-emacs/tree/master/modules/tools/lsp/][Doom LSP]].
- For CC +lsp, see: [[https://github.com/hlissner/doom-emacs/tree/master/modules/lang/cc#lsp-servers][LSP servers]].
- For python +lsp, see: [[https://github.com/hlissner/doom-emacs/tree/master/modules/lang/python#language-server-protocol-support][LSP Support]].
- Please see [[https://emacs-lsp.github.io/lsp-mode/page/settings/mode/][emacs-lsp/lsp-mode settings]].
- Robert Krahn: [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/#lsp-mode-and-lsp-ui-mode][Configuring Emacs for Rust Development]].
- TODO: see how [[https://github.com/xevrem/customacs][lsp and which-key integration]] works.
- Mortens: [[https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/index.html][Emacs and the Language Server Protocol]]
- Read this: [[https://neovim.discourse.group/t/clangd-creates-lots-of-errors-when-using-different-compiler-qcc/4437][clangd creates lots of errors when using different compiler (qcc)]]
- Read this: [[https://sarcasm.github.io/notes/dev/compilation-database.html][Sarcasm tips documentation: COMPILATION DATABASE]]
- Read this: [[https://langserver.org/][Langserver.org]]

*** Configuration

#+begin_src emacs-lisp
(use-package! lsp
  :init
  ;;
  ;; For general LSP, you need :tools lsp
  ;;
  (setq ;;;;;;;;;;;;; Features/Core ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; lsp-auto-configure t            ; default: t
        ;; lsp-eldoc-hook nil              ; default: '(lsp-hover)
        ;; lsp-eldoc-enable-hover t        ; detault: t
        lsp-eldoc-enable-hover nil         ; default: t (too noisy, so do on demand with lsp-ui-doc-show)
        lsp-eldoc-render-all t             ; default: nil. This to show enum value
        lsp-enable-on-type-formatting t    ; default: t
        lsp-enable-symbol-highlighting nil ; default: t
        ;; http://blog.binchen.org/posts/how-to-speed-up-lsp-mode/
        lsp-log-io nil                     ; enable log only for debug
        lsp-enable-folding nil             ; use evil-matchit' instead
        ;; lsp-enable-links nil            ; use ffip instead
        lsp-idle-delay 5.0                 ; default: 0.5
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Completion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-completion-enable t            ; see how is performance
        ;lsp-completion-provider :ivy       ; long live ivy
        ;; lsp-completion-show-detail nil         ; completion item detail
        ;; lsp-completion-show-kind nil           ; completion item kind
        lsp-enable-snippet nil             ; handle yasnippet by myself
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Diagnostics ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-diagnostics-provider :none
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Headerline ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-headerline-breadcrumb-enable nil               ; headerline
        lsp-headerline-breadcrumb-enable-diagnostics nil
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Modeline ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-modeline-workspace-status-enable nil
        lsp-modeline-code-actions-enable nil     ; modeline code actions
        lsp-modeline-diagnostics-enable nil      ; modeline diagnostics statistics
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Lens ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-lens-enable nil             ; default: nil
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Icons ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-headerline-breadcrumb-icons-enable nil
        ;;
        ;; well, how to make below works?
        ;;
        lsp-prefer-flymake nil          ; prefer lsp-ui (flycheck) over flymake
        ;;
        ;; lsp-navigation 'simple
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;; Extensions/UI ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-ui-doc-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-update-mode nil
        lsp-ui-peek-enable nil
        lsp-ui-peek-show-directory nil
        lsp-ui-flycheck-enable nil
        lsp-ui-flycheck-live-reporting nil
        lsp-ui-imenu-enable nil
        lsp-ui-doc-show-with-cursor nil  ; cursor hover
        lsp-ui-doc-show-with-mouse nil   ; mouse hover
        lsp-ui-doc-use-childframe nil    ; see how this
        lsp-ui-doc-include-signature nil ; see how this
        lsp-signature-auto-activate nil        ; manually: `lsp-signature-activate'
        lsp-signature-render-documentation nil ; signature help documentation
        ;;
        xref-prompt-for-identifier t           ; prompt if no identifier
   )
  ;;
  ;; For python, you need to add :lang (python +lsp)
  ;;
  (setq python-fill-column 149
        python-formatter 'yapf
        python-format-on-save nil
        python-sort-imports-on-save t
        python-pipenv-activate t
   )
)
#+end_src

File watchers: [[https://emacs-lsp.github.io/lsp-mode/page/file-watchers/][see this link]]

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
 ;; VUC directories
 (dolist (dir '(
            "[/\\\\]\\.repo\\'"
            "[/\\\\]\\.venv\\'"
            "[/\\\\]\\tests\\'"
            "[/\\\\]\\err\\'"
            "[/\\\\]\\lst\\'"
            "[/\\\\]\\opt\\'"
            "[/\\\\]\\out\\'"
            "[/\\\\]\\tmp\\'"
            "[/\\\\]\\.cache\\'" ; clangd index
            "[/\\\\]\\.clangd\\'" ; clangd index
            "[/\\\\]\\.kwlp\\'"  ; klocwor
            "[/\\\\]\\.kwps\\'"  ; klocwor
            "[/\\\\]\\Application_PTF\\'"
            "[/\\\\]\\User_Config_PTF\\'"
            "[/\\\\]\\TVIP_Ctrl_Files\\'"
            "[/\\\\]\\WindRiver\\'"
            ))
  (push dir lsp-file-watch-ignored-directories)
  )
 ;; well disable first :)
 (setq lsp-enable-file-watchers nil)
)
#+end_src

LSP-mode with clangd. Ref: [[https://github.com/doomemacs/doomemacs/tree/master/modules/lang/cc#lsp-servers][Configure LSP servers]].

#+begin_src emacs-lisp
(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))
#+end_src

**** .clangd

=clangd= does not like certain specific compiler cross compiling
options and generate ALS error. So, create a file =.clangd= at
the root of your project:

#+begin_example
CompileFlags:
    Remove: [-march=*, -mabi=*, -mcpu=*]
#+end_example

*** Keybindings

#+begin_src emacs-lisp
(defun ttk/xref-display-buffer ()
 "Display the *xref* buffer."
 (interactive)
 (let ((buffer (get-buffer "*xref*")))
   (if buffer
     (pop-to-buffer buffer)
    (error "The *xref* buffer does not exist yet"))))

;; (after! xref
;;  (set-popup-rule! "^*xref*$" :side 'left :size 0.4 :select t :ttl nil))
#+end_src

I don't like default doom keybindings for lsp. Here's mine:

#+begin_src emacs-lisp
(map! :after lsp
      :map (c-mode-map c++-mode-map python-mode-map)
      :localleader
      :g "l" nil                        ; firstly, unbind default doom binding
      :prefix ("l" . "ttk-lsp")         ; define our own
        :nv "d" #'xref-find-definitions
        ;; :nv "d" #'lsp-ui-peek-find-definitions
        :nv "D" #'lsp-ui-doc-show
        :nv "u" #'xref-pop-marker-stack
        ;; :nv "u" #'lsp-ui-peek-jump-backward
        :nv "c" #'lsp-treemacs-call-hierarchy
        :nv "s" #'lsp-find-references
        ;; :nv "s" #'lsp-ui-peek-find-references
        :nv "S" #'lsp-ui-find-workspace-symbol
        :nv "i" #'lsp-ui-sideline-toggle-symbols-info
        :nv "a" #'lsp-workspace-restart
        :nv "b" #'ttk/xref-display-buffer)
#+end_src

Note-1: =xref-pop-marker-stack= in Doom is remapped to =better-jumper-jump-backward=.
Ref: [[https://github.com/hlissner/doom-emacs/issues/4463][See this link]]. And it's keybinding is =C-o=.

* Company

Ref:
- [[https://tychoish.com/post/better-company/][Better Company]]
- [[https://readingworldmagazine.com/emacs/2020-07-27-emacs-company-mode/#article-title][Emacs Company Mode]]

#+begin_src emacs-lisp
(after! company
  ;; Full list of company backends, see:
  ;; https://github.com/company-mode/company-mode/tree/master
 (setq company-backends '(company-capf          ; citre use this
                          company-keywords
                          ;; company-semantic   ; i don't use semantic
                          company-files
                          ;; company-etags      ; i use cscope
                          ;; company-elisp      ; no longer needed
                          company-clang
                          ;; company-irony-c-headers
                          ;; company-irony
                          ;; company-jedi
                          company-cmake
                          ;; company-ispell    ; i don't use ispell
                          company-yasnippet))
 (setq company-echo-delay 0
       company-minimum-prefix-length 3
       company-show-numbers t
       company-tooltip-limit 20
       company-dabbrev-downcase nil
       ;; adjust this idle delay so it does not interrupt
       ;; your flow while still allowing you to call it on demand
       company-idle-delay 0.5           ; unit is seconds
       company-require-match nil
   )
 ;; make aborting less annoying
 (add-hook 'evil-normal-state-entry-hook #'company-abort)

;;  ;; using digits to select company-mode candidates
;;  ;; https://oremacs.com/2017/12/27/company-numbers/
;;  ;; add some bindings
;;  (let ((map company-active-map))
;;    (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
;;    (number-sequence 0 9))
;;    (define-key map " " (lambda ()
;;                          (interactive)
;;                          (company-abort)
;;                          (self-insert-command 1)))
;;    (define-key map (kbd "<return>") nil)
;;    )
;;  ;; actual code
;;  (defun ora-company-number ()
;;   "Forward to `company-complete-number'.
;;
;; Unless the number is potentially part of the candidate.
;; In that case, insert the number."
;;   (interactive)
;;   (let* ((k (this-command-keys))
;;         (re (concat "^" company-prefix k)))
;;     (if (cl-find-if (lambda (s) (string-match re s))
;;                     company-candidates)
;;         (self-insert-command 1)
;;       (company-complete-number
;;       (if (equal k "0")
;;           10
;;         (string-to-number k))))))
;;   ;;
;;   ;; end of using digits to select company-mode candidates
;;   ;;
 )
#+end_src

=company= is great, but it can get in the way when using on =org-mode= buffers. Hence,
disable:

#+begin_src emacs-lisp
(after! org
  ;; But I don't want to see line number in og mode
  (add-hook! 'org-mode-hook #'doom-disable-line-numbers-h)
  ;; disable auto-complete in org-mode buffers
  (remove-hook 'org-mode-hook #'auto-fill-mode)
  ;; disable company too
  (setq company-global-modes '(not org-mode)))
#+end_src

* Spell Checker

Toggle ON for org-mode. Well, it's too noisy. Remove the checker =spell=
from =init.el=.

#+begin_src emacs-lisp :tangle no
(after! spell-fu
 (add-hook 'org-mode-hook
   (lambda ()
     (setq spell-fu-faces-exclude '(org-meta-line org-link org-code))
     (spell-fu-mode))))
#+end_src

Another variation,

#+begin_src emacs-lisp :tangle no
(use-package! spell-fu
  :hook (org-mode . (lambda ()
                      (setq spell-fu-faces-exclude
                            '(org-meta-line org-link org-code))
                      (spell-fu-mode)
                      )))
#+end_src

Globally you can toggle with 'M-x global-spell-fu-mode'. =spell-fu= caches words
in =~/.emacs.d/.local/etc/spell-fu=.

* Calendar and World Clock

** Calendar
Ref:
- [[https://emacsredux.com/blog/2021/06/08/emacs-as-your-calendar/][Emacs as Your Calendar]]
- [[https://emacs.stackexchange.com/questions/8309/change-local-holiday-calendar][StackExchange: Change local holiday calendar]]
- [[https://www.emacswiki.org/emacs/CalendarLocalization][EmacsWiki: Calendar Localization]]
- [[https://thenybble.de/projects/german-emacs-calendar.html][German emacs calendar setup]]

** Localized Holidays
#+begin_src emacs-lisp :tangle no
(setq singapore-holidays '((when (= displayed-year 2021)
                             (append
                              (holiday-fixed 1 1   "New Year's Day")
                              (holiday-fixed 2 12  "SG: Chinese New Year")
                              (holiday-fixed 2 13  "SG: Chinese New Year")
                              (holiday-fixed 4 2   "SG: Good Friday")
                              (holiday-fixed 5 1   "Labour Day")
                              (holiday-fixed 5 13  "SG: Hari Raya Puasa")
                              (holiday-fixed 5 26  "SG: Vesak Day")
                              (holiday-fixed 7 20  "SG: Hari Raya Haji")
                              (holiday-fixed 8 9   "SG: National Day")
                              (holiday-fixed 11 4  "SG: Deepavali")
                              (holiday-fixed 12 25 "Christmas Day")))
                           (when (= displayed-year 2022)
                             (append
                              (holiday-fixed 1 1   "New Year's Day (leave credit)")
                              (holiday-fixed 1 20  "Totok AL")
                              (holiday-fixed 1 27  "Totok AL")
                              (holiday-fixed 1 28  "Totok AL")
                              (holiday-fixed 1 31  "Early Release")
                              (holiday-fixed 2 1   "Chinese New Year")
                              (holiday-fixed 2 2   "Chinese New Year")
                              (holiday-fixed 4 15  "Good Friday")
                              (holiday-fixed 5 1   "Labour Day")
                              (holiday-fixed 5 2   "Holiday in lieu")
                              (holiday-fixed 5 3   "Hari Raya Puasa")
                              (holiday-fixed 5 15  "Vesak Day")
                              (holiday-fixed 5 16  "Holiday in lieu")
                              (holiday-fixed 7 10  "Hari Raya Haji")
                              (holiday-fixed 7 11  "Holiday in lieu")
                              (holiday-fixed 8 9   "National Day")
                              (holiday-fixed 10 24 "Deepavali")
                              (holiday-fixed 12 25 "Christmas Day")
                              (holiday-fixed 12 26 "Christmas Day"))))
      south-korea-holidays '((when (= displayed-year 2021)
                               (append
                                 (holiday-fixed 1 1   "New Year's Day")
                                 (holiday-fixed 2 11  "SK: Korean New Year")
                                 (holiday-fixed 2 12  "SK: Korean New Year")
                                 (holiday-fixed 2 13  "SK: Korean New Year")
                                 (holiday-fixed 2 14  "SK: Korean New Year")
                                 (holiday-fixed 3 1   "SK: March 1st Movement")
                                 (holiday-fixed 5 1   "Labour Day")
                                 (holiday-fixed 5 5   "SK: Children's Day")
                                 (holiday-fixed 5 19  "SK: Buddha's Birthday")
                                 (holiday-fixed 6 6   "SK: Memorial Day")
                                 (holiday-fixed 7 17  "SK: Constitution Day")
                                 (holiday-fixed 8 15  "SK: Liberation Day")
                                 (holiday-fixed 9 20  "SK: Harvest Festival")
                                 (holiday-fixed 9 21  "SK: Harvest Festival")
                                 (holiday-fixed 9 22  "SK: Harvest Festival")
                                 (holiday-fixed 10 3  "SK: National Foundation Day")
                                 (holiday-fixed 10 9  "SK: Hangeul Day")
                                 (holiday-fixed 12 25 "Chrstmas Day"))))
      ;; calendar-holidays (append singapore-holidays south-korea-holidays)
      calendar-holidays (append singapore-holidays)
      calendar-mark-holidays-flag t     ; mark dates of holidays
      calendar-week-start-day 1         ; week start on monday
  )
(add-hook 'calendar-today-visible-hook 'calendar-mark-today)    ; mark today's date
#+end_src

** World Clock

List of world clock to show for M-x world-clock. Refer [[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones][this timezone]] for the valid TZNAME.

#+begin_src emacs-lisp
(setq world-clock-list
      '( ;  TZNAME             LABEL
        ("America/Mexico_City" "GDL  ") ; Guadalajara
        ("America/Chicago"     "DPK  ") ; Deer Park
        ("Etc/UTC"             "-UTC-")
        ("Europe/Berlin"       "FFM  ") ; Frankfurt
        ("Asia/Kolkata"        "BGL  ") ; Bangalore
        ("Asia/Singapore"      "SGP**") ; Singapore
        ("Asia/Chongqing"      "CHQ  ") ; Chongqing
        ("Asia/Tokyo"          "Tokyo")
        ("Asia/Seoul"          "Seoul")
        ))
;; Format of the display
(setq world-clock-time-format "%a %d-%b-%Y %p %I:%M %Z") ; default: "%A %d %B %R %Z"
#+end_src

Now, printing world clock other than now (ref: [[https://emacsredux.com/blog/2024/03/11/tracking-world-time-with-emacs/][Tracking World Time with Emacs]]):

=ts= is available in melpa. This is [[https://github.com/alphapapa/ts.el][their Gibhub]].

#+begin_src emacs-lisp :tangle packages.el
(package! ts)
#+end_src

Let's use our own function to display it.

#+begin_src emacs-lisp
(use-package! ts
  :init
  :config
   (defun ttk/world-clock ()
     (interactive)
     (with-temp-buffer
       (org-mode)
       (save-excursion
         (setq ots (org-timestamp ""))))
     (setq-local diff (ts-diff (ts-fill (ts-parse-org ots)) (make-ts :unix 0))) ;; seconds since 1970
     (setq value "")
     (dolist (timedata world-clock-list)
       (setq value (concat value
                           (nth 1 timedata) " "
                           (format-time-string
                            "%a %d-%b-%Y %p %I:%M %z"
                            diff (car timedata)) "\n")))
     ;; (insert value)                     ; insert into current buffer at current cursor position
     (display-message-or-buffer value)  ; shown in the echo area
     ))
#+end_src

* Other Modes
** QML (QT Declarative)
Note: This is not needed anymore. Available in Doom =:lang qt=.

Fork from [[https://github.com/coldnew/qml-mode][coldnew/qml-mode]].
#+begin_src emacs-lisp :tangle no
(package! qml-mode
 :recipe (:local-repo "ttk-qml"         ; look for ${DOOMDIR}/ttk-qml/qml-mode.el
 ))
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package! qml-mode
  :init
  :config
  )
;; enable qml-mode for qml files
;(setq auto-mode-alist (cons '("\\.[qQ][mM][lL]$" . qml-mode) auto-mode-alist))
#+end_src

** CSV mode
Note: This is not needed anymore. Available in Doom =:lang data=.

Available on Melpa, ref: https://elpa.gnu.org/packages/csv-mode.html
#+begin_src emacs-lisp :tangle no
(package! csv-mode
 :recipe (:branch "master"
 ))
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package! csv-mode
  :init
  :config
  )
;; enable csv-mode for csv files
;(setq auto-mode-alist (cons '("\\.[Cc][Ss][Vv]$" . csv-mode) auto-mode-alist))
#+end_src

** JSON mode

Available in Doom =:lang json=.

#+begin_src emacs-lisp
(when (modulep! :lang json)
  (setq auto-mode-alist (cons '("\\.[jJ][sS][oO][nN]$" . json-mode) auto-mode-alist)))
#+end_src

** CMake mode

Available in Doom: =:lang cc=

#+begin_src emacs-lisp
(when (modulep! :lang cc)
  (setq auto-mode-alist (cons '("^[Cc][Mm][Aa][Kk][Ee][Ll][Ii][Ss][Tt][Ss].[Tt][Xx][Tt]$" . cmake-mode) auto-mode-alist)))
#+end_src

** Makefile mode

#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("component.def"              .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("BuildEnv.opt"               .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("makefile_RH850_F1K_1_5MB"   .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("windriver_RH850.opt"        .  makefile-mode) auto-mode-alist))
#+end_src

* Calculator

Reading:
- [[https://truongnghiem.wordpress.com/common-calculations-in-emacscalc/][Common Calculations in Emacs Calc]].
- [[https://florian.adamsky.it/2016/03/31/emacs-calc-for-programmers-and-cs.html][Emacs Calc for Programmers and Computer Scientists]].
- [[https://hungyi.net/posts/emacs-calculate-while-you-write/][Emacs Lets You Calculate While You Write]].
- [[https://nullprogram.com/blog/2009/06/23/][The Emacs Calculator]]
- [[https://www.emacswiki.org/emacs/Calc_Tutorials_by_Andrew_Hyatt][Calc Tutorials by Andrew Hyatt]]
- [[https://pagefault.se/post/emacs-can-do-that/][Convert hours, mins and seconds]]
- [[https://github.com/Jesse-Millwood/calc-prog-utils][Calc Prog: a small extension to the Emacs Calc package]]

** Keybinding

Doom Emacs uses [[https://github.com/emacs-evil/evil-collection][evil-collection]] which remaps some of the keys in
calc mode to be more aligned with evil mode.

Most common operations in Doom Emacs are mapped to the =SPC= leader,
so pressing =C-x= felt foreign to me. So,

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("=" . "calc")
       "=" #'calc-dispatch
       ;; some other shorcuts
       "c" #'calc                ; launch calc mode w/o doing anything clever
       "q" #'quick-calc          ; quick calculations in the minibuffer
       "g" #'calc-grab-region    ; grab a region w/o going through calc-dispatch
       "p" #'calc-copy-to-buffer ; same as SPC u p P
       ))
#+end_src

|-------------------------+------------|
| Function                | Keybinding |
|-------------------------+------------|
| M-x calc-dispatch       | SPC = =    |
| M-x calc                | SPC = c    |
| M-x quick-calc          | SPC = q    |
| M-x calc-grab-region    | SPC = g    |
| M-x calc-copy-to-buffer | SPC = p    |
| M-x calc-unpack         | v u        |
| M-x calc-copy-to-buffer | SPC u p P  |
|-------------------------+------------|

** Trail Commands

Ref: [[https://www.gnu.org/software/emacs/manual/html_node/calc/Trail-Commands.html][Emacs Trail Commands]]

#+begin_example
M-x calc-trail-display, bound to t d
M-x calc-trail-in,      bound to t i
M-x calc-trail-out,     bound to t o
#+end_example

** Digit Grouping

Display thousands in decimal, or tuple in binary.

#+begin_example
M-x calc-group-digits <enter>, bound to d g
#+end_example

** Calc-Mode Epiphany

Ref: [[https://www.youtube.com/watch?v=D9lmCbLGZ_c][Youtube Demonstration]].
#+begin_example
<Place cursor at the location for calc result>
M-x calc            (calc mode)
<Do calculcation>
C-x * y             (copy last item in calc into cursor location)
#+end_example
#+begin_example
# 2:18:47
Convert 2:18:47 into seconds = 8327
#+end_example

** Convert Decimal/Hexadecimal/Binary

#+begin_example
M-x calc
Type any number.
Type "d6" to turn the display into hex form
Type "d0" to turn the display into dec form
Type "d2" to turn the display into binary form
#+end_example

To display radix generally, use "d r" (calc-radix) and enter
an integer from 2 to 36 (2:binary, 8:octal, 6:hex, 0:dec, etc).

About inputting a number:
- A number entered without "#" is always interpreted as decimal.
- To enter a number with different radix, type "initial digit" then "#"
  |---------------+-------------|
  | initial digit | radix       |
  |---------------+-------------|
  |             2 | binary      |
  |            16 | hexadecimal |
  |             8 | octal       |
  |             0 | decimal     |
  |---------------+-------------|
- To enter a number as current radix, type "#".

** Binary Number Operation

|------------+----------------------+------------------------------|
| Keybinding | Calc Function        | Description                  |
|------------+----------------------+------------------------------|
| b a        | (calc-and)           | Bitwise AND                  |
| b o        | (calc-or)            | Bitwise OR                   |
| b x        | (calc-xor)           | Bitwise XOR                  |
| b n        | (calc-not)           | Bitwise NOT                  |
| b d        | (calc-diff)          | Bitwise difference           |
| b r        | (calc-rshift-binary) | Bitwise right shift by 1 bit |
| b l        | (calc-lshift-binary) | Bitwise left shift by 1 bit  |
|------------+----------------------+------------------------------|

**** Bitwise shift by more than 1 bit

- Use /numeric prefix argument/. Example: To shift 9 bits to the left:
  #+begin_example
  1 <RET>
  C-9 b l
  #+end_example
- Use =H b l=. It requires 2 arguments from the stack: the value to shift,
  and, at the top-of-stack, the number of bits to shift:
  #+begin_example
  1 <RET>
  9 <RET>
  H b l
  #+end_example

** HMS
*** Convert Minute to HH:MM:SS
1. Convert 8000 min to hour
   : 8000 RET 60 RET /
   133.333333333
2. Convert the hour to HMS
   : M-x calc-to-hms (bound to c h)
   133@ 19' 59.999999"
Result: 6000 secs = 133 hour 19 min 60 sec

*** Convert HH:MM:SS to Minute
1. Enter to algebraic mode
   : '
   : Algebraic: 133hr+19min+60sec
   133 hr + 19 min + 60 sec
2. Convert to base unit
   : M-x calc-base-unit (bound to U b)
   480000 s
3. Convert to minute
   : 60 RET /
   8000 s

* Casual - Opinioted procelain for emacs calc, dired and others

Ref:
- [[http://yummymelon.com/devnull/announcing-casual-an-opinionated-porcelain-for-emacs-calc.html][Announcing Casual - An opinioated procelain for Emacs Calc]]
- [[https://github.com/kickingvegas/casual][github: Casual]]
- [[https://www.reddit.com/r/emacs/comments/1bnj5xe/announcing_casual_an_opinionated_porcelain_for/][reddit: Announcing Casual - An opinionated procelain for Emacs Calc]]
- [[http://yummymelon.com/devnull/announcing-casual-redux-and-reorganization.html][Announcing Casual (Redux) and Reorganization]]

Enough is enough for memorizing too many default emacs's keybindings.

#+begin_src emacs-lisp :tangle packages.el
(package! casual
  :recipe (:host github
           :repo "kickingvegas/casual"))
#+end_src

For Calc:
#+begin_src emacs-lisp
(map! :after calc
      :map calc-mode-map
       "C-o" #'casual-calc-tmenu        ; no need nv
      :map calc-alg-map
       "C-o" #'casual-calc-tmenu        ; no need nv
)
#+end_src

For Dired:
#+begin_src emacs-lisp
(map! :after dired
      :map dired-mode-map
      :nv "C-o" #'casual-dired-tmenu)   ; need nv
#+end_src

* Tools

** docker

Yeay ... finally docker.

#+begin_src emacs-lisp
(when (modulep! :tools docker)
  (setq auto-mode-alist (cons '("Dockerfile\\$" . dockerfile-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("dockerfile" . dockerfile-mode) auto-mode-alist)))
#+end_src

** Copy full path of current buffer

Doom already have this with =SPC i F= (Insert current file path). So, disable below.

#+begin_src emacs-lisp :tangle no
;; To get the full path of current buffer and put it in kill-ring
;;
(defun ttk/copy-full-path-to-kill-ring ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    (kill-new (file-truename buffer-file-name))))
#+end_src

** Insert date at cursor

#+begin_src emacs-lisp
;; insert date into buffer
;;
(defun ttk/insert-date ()
 "Insert date at point."
 (interactive)
 (insert (format-time-string "%a %e-%b-%Y %l:%M%p")))
#+end_src

** Show ascii table

Ref: [[https://www.emacswiki.org/emacs/AsciiTable][EmacsWiki: Ascii Table]].

#+begin_src emacs-lisp
(defun ttk/ascii-table()
  "Display basic ASCII table (0 thru 128)."
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (setq buffer-read-only nil)        ;; Not need to edit the content, just read mode (added)
  ;; (local-set-key "q" 'bury-buffer)   ;; Nice to have the option to bury the buffer (added)
  (save-excursion (let ((i -1))
    (insert "ASCII characters 0 thru 127.\n\n")
    (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
    (while (< i 31)
      (insert (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
                      (setq i (+ 1  i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)))
      (setq i (- i 96))))))
#+end_src

** Arrayify

Ref: [[https://news.ycombinator.com/item?id=22129636][Arrayify]].

Turn strings on newlines into QUOTEd, comma-separated one-liner. Eg:

#+begin_example
josh
sam
jed
C.J.
toby
#+end_example

You select those text, and run "arrayify". You can optionally provide a quote character
to transform to:

#+begin_example
"josh", "jed", "sam", "C.J.", "toby"
#+end_example

#+begin_src emacs-lisp
(defun ttk/arrayify (start end quote)
  "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
  (interactive "r\nMQuote: ")
  (let ((insertion
         (mapconcat
          (lambda (x) (format "%s%s%s" quote x quote))
          (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)))
#+end_src

** dwim-shell-command

Ref: [[https://github.com/xenodium/dwim-shell-command][github.com/xenodium/dwim-shell-command]]

Activate manually by: =M-x dwim-shell-command=.

#+begin_src emacs-lisp :tangle packages.el
(package! dwim-shell-command
  :recipe (:host github
           :repo "xenodium/dwim-shell-command"))
#+end_src

Let's doe some configuration
#+begin_src emacs-lisp
(use-package! dwim-shell-command
  :init
  ;; code here will run immeidately
  :config
  ;; code here will run after the package is loaded
  (defun ttk/dwim-shell-command-convert-svg-to-png ()
    "Convert all marked svg files to png format"
    (interactive)
    (dwim-shell-command-on-marked-files
     "Convert to png"
     "rsvg-convert -b white <<f>> -f png -o <<fne>>.png"
     :utils "rsvg-convert"))
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command)))
#+end_src

* How To

** Directory Editor with Dired

Tired of dired littering your emacs with dozens of buffers as you
navigate through a directory tree? This solves it:

#+begin_src emacs-lisp
;; For emacs-28.1 and above
(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

For other =dired= options, refer to [[https://www.masteringemacs.org/article/whats-new-in-emacs-28-1][New in Emacs 28.1]].

Other Ref:

- [[https://www.youtube.com/watch?v=oZSmlAAbmYs][Youtube: Emacs Doom E03 - A short intro to Dired]]
- [[https://www.youtube.com/watch?v=ing9Y53RICs][Youtube: The Nuts and Bolds of Emacs DIRED]]
- =evil-collection=: [[https://github.com/emacs-evil/evil-collection/blob/master/modes/dired/evil-collection-dired.el][keybinding for dired]]
- [[https://ashok-khanna.medium.com/introduction-to-dired-mode-91cecd3a06ff][Ashok: Introduction to Dired Mode]]

Navigational:

- =SPC .= and =<enter>=
- Move cursor down/up: =j=, =k=
- Go subdir down/up: =<enter>=, =-=
- Switch between full view and short view: =(=

Operations:

- Create a directory: =+=
- Create a file: =SPC .= and type in a new filename followed by: =<enter>= will
  automatically open a new file.
- Rename file: =i=, to confirm: =Z Z=, to abort: =Z Q=
- Mark to delete a directory: =d=
  + Execute: =x=
  + Unmark: =u=
- Refresh the Dired buffer: =gr= (=M-x revert-buffer=)

Other operations:

- Sort by name/date: =o=
- Modify file/directory permissions: =M=
- Modify owner: =O=
- Mark file(s): =m=
- Unmark file(s): =u=, unmark all: =U=

Two panes operations:

- Create 2 panes horizontal: =SPC w s=
- Switch between pane: =SPC w w=
- Copy file from current pane to another pane: =C=
- Move file from current pane to antoher pane: =R=

** Expand region

Ref: [[https://github.com/magnars/expand-region.el][magnars/expand-region.el]]
Video: [[http://emacsrocks.com/e09.html][Emacs Rocks! Episode 09: expand-region]]

#+begin_example
M-x er/expand-region
#+end_example

*** Key binding

Good read: [[https://micro.rousette.org.uk/2021/01/03/a-useful-binding.html][A useful binding for expand-region in Emacs]]. Clever keybinding
from Henrik the Devil Lissner himself :)

#+begin_src emacs-lisp
(map! (:map 'override
       :v "v" #'er/expand-region
       :v "V" #'er/contract-region))
#+end_src

In visual mode, hit =v= will expand region, hit =V= will contract region!

** Map Unmap keybinding
Ref:
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/cc/config.el][doom config.el]]
- [[https://github.com/hlissner/doom-emacs/issues/1797][Unmap keys with prefix]]
- [[https://github.com/hlissner/doom-emacs/issues/820][changing leader key to F13]]
- [[https://github.com/hlissner/doom-emacs/issues/814][howto unmap keymap prefix set via map!]]

** What is my xxx
- Specific keybinding: =<M-x> describe-key (SPC h k)=
- List of keybindings: =SPC ?=
- Specific function: =<M-x> describe-function (SPC h f)=
- Specific variable: =<M-x> describe-variable (SPC h v)=

* References

A lot of manual configuration has been rendered moot by using Emacs Doom,
which aggregates a well-maintained and organized collection of common configuration
settings for performance optimization, package management, commonly used packages
(e.g. Org) and much more.

** TODO: To Install Later

- github: [[https://github.com/emacs-citar/citar][Citar: completing read frond-end BibTeX, JSON, LaTeX, etc]]
- [[https://emacsconf.org/2021/talks/research/][emacsconf: managing research workflow (bibliography, note-taking, arXiv)]]
- github: [[https://github.com/pprevos/emacs-writing-studio][Emacs Writing Studio]]

** General Emacs

- [[https://philjackson.github.io/][Phil Jackson: Snippets and other bits]]
- [[https://blog.sumtypeofway.com/posts/emacs-config.html][Patrick Thomson: Emacs is Agar for Brain Worms]]
- [[https://www.masteringemacs.org/][Mickey Petersen: Mastering Emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][GNU Press: An Introduction to Programming in Emacs Lisp]]
- [[http://yummymelon.com/devnull/][Charles Choi: notes from /dev/null]]

** Doom Emacs

- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur: Emacs config]]
- [[https://dangirsh.org/projects/doom-config.html][Dan Girshovich: doom-config]]
- [[https://www.gtrun.org/custom/config.html][GuangTao: Doom Emacs config]]
- [[https://cyberchris.xyz/posts/org-mode-assignments/][Chris Tomy: Writing Assignments with Doom Emacs]]
- [[https://hungyi.net/posts/emacs-calculate-while-you-write/][Hung-Yi's Journal: Emacs Lets You Calculate While You Write]]
- [[https://github.com/elken/.doom.d][Elken Doom]]: to be continued.
- [[https://emacstil.com][Junji Zhi: Emacs TIL]]
- [[https://narra.co.za/doom-tips-and-howtos/][Nardus Geldenhuys: Doom Tips and Howto]]: little things make great.
- [[https://hieuphay.com/doom-emacs-config/][Hieu Phay: My Doom Emacs Configuration]]

** Org-mode

- [[https://blog.tecosaur.com/tmio/][This Month in Org]]

** Keybindings
:PROPERTIES:
:CUSTOM_ID: ref-keybindings
:END:
Map reference:
#+begin_example
M-x SPC h f map\!
#+end_example

- [[https://github.com/hlissner/doom-emacs/issues/920#issuecomment-425654279][How to map keybindings for built-in modes]].
- [[https://github.com/hlissner/doom-emacs/issues/1314][How to make package's major mode attaced with leader key map]].
- [[https://github.com/hlissner/doom-emacs/issues/2105][Define keybindings for logview major-mode]].
- [[https://github.com/hlissner/doom-emacs/issues/3246][Change the leader keybinding based on the active mode]].
- [[https://www.reddit.com/r/emacs/comments/irhe5d/doomemacs_binding_functions_to_keystrokes_greater/][Binding functions to keystrokes greater than two]].
- [[https://github.com/hlissner/doom-emacs/issues/1313#issuecomment-480665450][map! macro cause non-prefix error]]
- [[https://rameezkhan.me/adding-keybindings-to-doom-emacs/][Rameez Khan: Adding Keybindings to Doom Emacs]]
- [[https://emacsredux.com/blog/2023/03/12/remove-keybinding-in-emacs/][Emacs Redux: Remove Keybinding in Emacs]]
- [[https://emacsredux.com/blog/2023/03/14/removing-unbinding-vs-unsetting-keybindings/][Emacs Redux: Removing (Unbinding) vs Unsetting Keybindigs]]

** =pipenv=
- [[https://github.com/hlissner/doom-emacs/issues/1666][REQ Automatically activate pipenv if available]]
- [[https://github.com/hlissner/doom-emacs/pull/2806][Enable pipenv-with-projectile]]
- [[https://github.com/hlissner/doom-emacs/pull/3116][Enable projectile integration for pipenv.el]]
- [[https://levelup.gitconnected.com/install-multiple-python-versions-on-windows-10-15a8685ec99d][Install Multiple Python Versions on Windows 10]]
- [[https://levelup.gitconnected.com/how-to-install-and-manage-multiple-python-versions-on-windows-10-c90098d7ba5a][How to install and Manage Multiple Python Versions on Windows 10]]

** Latex and Tikz

This is awesome [[https://latexdraw.com/][TikZBlog]].

Ref:

- [[https://atc1.aut.uah.es/~david/notes/2017/03/datastructures-in-tikz/][Data Structures in Tikz]]
- [[https://www.baeldung.com/cs/latex-drawing-graphs][Draw a Graph Using LaTeX]]
- [[https://jindongpu.wordpress.com/2013/09/25/use-tikz-package-to-draw-automata-in-latex/][Use Tikz package to draw automana in LaTeX]]
- [[https://latexdraw.com/block-diagram-in-latex-step-by-step-tikz-tutorial/][Block Diagram in LaTeX: Step-by-Step Tikz Tutorial]]

** Everything Else

Ref:

- [[https://monkey.org/~marius/unix-tools-hints.html][Hints for Writing Unix Tools]]
- [[https://www.youtube.com/watch?v=ZWQPBoxbqw4][Youtube: Tips and Secrets to Shell Efficienty]]
- [[https://skybert.net/mac-os-x/macos-as-unix-workstation-2022/][macOS as Unix Workstation 2022]]

** AI

- [[https://www.perplexity.ai/][Perplexcity]]
- [[https://gemini.google.com][Gemini]]

* Practice
** Delete n lines including current line

*** With avy
#+begin_example
d        (delete)
g s l    (avy-goto-line)
#+end_example

*** With evilmotion
#+begin_example
d        (delete)
5 j      (5 down the line)
#+end_example

** Delete n block of chars

*** With avy
#+begin_example
d            (delete)
g s s        (evil-avy-goto-char-2)
    or
g s <SPACE>  (evil-avy-goto-char-timer)
#+end_example

*** With evil-snipe
#+begin_example
d            (delete)
s 2chars     (evil snipe)
#+end_example

** (Un)commenting

Ref: [[https://medium.com/@aria_39488/the-niceties-of-evil-in-doom-emacs-cabb46a9446b][The Niceties of Evil in Doom Emacs]].

*** Select comment
#+begin_example
vac   (visual around comment)
#+end_example

** Evil-multiedit
Ref: [[https://www.youtube.com/watch?v=zXdT5jY_ui0&t=112s][Emacs Doom E08: Multiple cursor with evil-multiedit]].

Basic usage:
#+begin_example
- Select a region  (visual selection)
- M-d              (find occurance downwards)
- M-D              (find occurance upwards)
- C-n              (go to next occurance)
- C-p              (go to previous occurance)
- Enter            (to exclude current occurance)
- d e              (edge case: delete last word in occurance)
#+end_example

#+begin_example
One morning, when Gregor Samsa woke from troubled dreams, he found himself
transformed in his bed into a horrible vermin. He lay on this armour-like back,
and if he lifted his head a little he could see his bbrown belly, slightly domed
and divided by arches into stiff sections. The bedding was hardly able to cover
it and seemed ready to slide off any moment.

One morning, when  Samsa woke from troubled dreams, he found himself
transformed in his bed into a horrible vermin. He lay on this armour-like back,
and if he lifted his head a little he could see his bbrown belly, slightly domed
and divided by arches into stiff sections. The bedding was hardly able to cover
it and seemed ready to slide off any moment.

One morning, when  Samsa woke from troubled dreams, he found himself
transformed in his bed into a horrible vermin. He lay on this armour-like back,
and if he lifted his head a little he could see his bbrown belly, slightly domed
and divided by arches into stiff sections. The bedding was hardly able to cover
it and seemed ready to slide off any moment.
#+end_example

** Narrowing
Ref: [[https://www.youtube.com/watch?v=4bVMXXxPiQs][Youtube: Narrowing]]

#+begin_example
- Select region of lines                 (visual line)
- M-x doom/narrow-buffer-indirectly
- Do something, e.g. evil-multiedit
- M-x doom/widen-indirectly-narrowed-buffer  (Bound to: z N)
#+end_example

** Copy and comment lines
#+begin_example
M-x evilnc-copy-and-comment-lines
#+end_example

** Search with ripgrep

*** Live project search from the project root using ripgrep
#+begin_example
M-x +default/search-project  ( SPC / ) ( SPC s p )
#+end_example

*** Grep for a string in the current directory using ripgrep
#+begin_example
M-x counsel-rg
#+end_example

*** Search the current project with ripgrep
#+begin_example
M-x counsel-projectile-rg
#+end_example

** Break a long line into shorther lines

#+begin_example
M-x ruler-mode        (show ruler)
M-x set-fill-column   (set max chars per line used to 'fill' command)
M-x fill-paragraph    (break a long line into shorter lines)
#+end_example

** Macros

Automate repetitive tasks by recording and replaying keyboard macros.

- Start keyboard macro: =M-x kmacro-start-macro: C-x (=
- End keyboard macro: =M-x kmacro-end-macro: C-x )=
- End and call macro: =M-x kmacro-end-and-call-macro: C-x e=
- Set counter: =M-x kmacro-set-counter: C-x C-k C-c=
- Insert counter: =M-x kmacro-insert-counter: C-x C-k TAB=

*** Exercise 1

Produce this:
#+begin_example
(xterm-color-names [,col0 ,col1 ,col2 ,col3 ,col4 ,col5 ,col6 ,col7])
#+end_example

*** Exercise 2

Produce this:
#+begin_example
0   http0mailbox
1   http1mailbox
2   http2mailbox
3   http3mailbox
4   http4mailbox
5   http5mailbox
6   http6mailbox
7   http7mailbox
8   http8mailbox
9   http9mailbox
10  http10mailbox
#+end_example
