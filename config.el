;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Well, macros to check system-name.
(defconst IS-IGL7568W (string-prefix-p "IGL7568W" (system-name) t))
(defconst IS-IGD1943U (string-prefix-p "igd1943u" (system-name) t))
(defconst IS-IGD0464U (string-prefix-p "igd0464u" (system-name) t))
(defconst IS-VDI1039  (string-prefix-p "igvmf02d1039vdi" (system-name) t))
(defconst IS-HORUS    (string-prefix-p "horus"    (system-name) t))
(defconst IS-REX      (string-prefix-p "rex"      (system-name) t))
(defconst IS-HAMM     (string-prefix-p "hamm"     (system-name) t))
;; print hostname
(cond
 (IS-IGL7568W
  (message "hostname: IGL7568W"))
 (IS-IGD1943U
  (message "hostname: igd1943u"))
 (IS-IGD0464U
  (message "hostname: igd0464u"))
 (IS-VDI1039
  (message "hostname: igvmf02d1039vdi"))
 (IS-HORUS
  (message "hostname: horus"))
 (IS-REX
  (message "hostname: rex"))
 (IS-HAMM
  (message "hostname: hamm"))
 (t
  (message "hostname: unknown")))

(setq-default evil-snipe-override-evil-repeat-keys nil
              doom-localleader-key ","
              doom-localleader-alt-key "M-,")

(setq-default inhibit-x-resources t)

(set-language-environment 'utf-8)
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq utf-translate-cjk-mode nil
      locale-coding-system 'utf-8
      default-file-name-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8
      coding-system-for-write 'utf-8)

(setq-default create-lockfiles nil)

(setq-default
 auto-save-default nil             ; don't create #autosave# files
 make-backup-files nil             ; don't create backup~ files
 create-lockfiles  nil)

(setq-default confirm-kill-emacs nil)

(set-fringe-mode '(0 . 0))            ; disable fringe, dun need it (no line wrap, etc)
(fset 'yes-or-no-p 'y-or-n-p)         ; replace yes/no prompts with y/n
(setq-default
 indent-tabs-mode nil                 ; use spaces (not tabs) for indenting
 truncate-lines t                     ; turn on truncating long lines
 require-final-newline t              ; always add a final newline
 delete-by-moving-to-trash nil        ; no need to go to OS's trash folder
 cursor-in-non-selected-windows t     ; hide cursor in inactive windows
 select-enable-clipboard t            ; merge system's and emacs's clipboard
 ;; disable, looks like Doom has it by default?
 split-height-threshold 0             ; i only want vertical window splitting
 split-width-threshold nil            ; and dunwan horizontal window splitting
 ;; vi like scrolling
 scroll-step 1                        ; scroll just goes down 1 line even it hits the bottom
 scroll-margin 3                      ; 3 lines margin
 ;;
 ;; Build-In VC Package
 vc-follow-symlinks t                 ; don't ask for confirmation for opening symlinked file
 ;; Ref https://magit.vc/manual/magit/Performance.html
 ;; I don't use VC in addition to Magit, so disable it to keep it from performing
 ;; unnecessary work (see also another option just below)
 ;; vc-handled-backends nil ; disable due to causing vcs segment gone in doom-modeline
 ;; You can also disable its use for Git but keep using it when using another version
 ;; control system:
 ;; vc-handled-backends (delq 'Git vc-handled-backends)
 ;;
 ;; always just just left-to-right text
 bidi-display-reordering nil           ; makes emacs a bit faster for very long lines
 dabbrev-case-replace nil              ; make sure case is preserved when expanding
 ;;
 ;; This section is related to window
 ;; For more info: https://www.masteringemacs.org/article/demystifying-emacs-window-manager
 ;; #1: If wwitching buffers manually with C-x b fails with error, so I want it to open somewhere
 switch-to-buffer-in-dedicated-window 'pop
 ;; #2: Treat manual buffer switching the same as programmatic switching
 switch-to-buffer-obey-display-actions t ; requires emacs 27+
 ;; Controlling Buffer and Window Display
 ;; If you want to control where a buffer or window must appear, you must customize
 ;; display-buffer-alist
 ;;
 ;; this one for minibuffer and echo area
 resize-mini-windows 'grow-only        ; this to make casual-calc height to grow
 max-mini-window-height 0.75           ; default 0.25
 ;; looks like below do the trick for cacual-calc
 ;window-min-height      8              ; min total height, in lines, of any window
 )

(global-set-key [remap dabbrev-expand] 'hippie-expand)

(after! org
  (setq-default enable-local-variables t
                enable-local-eval t))

(cond (IS-MAC
 ;; 1) Mac build-in Keyboard & Mouse preference:
 ;;    - Swapt [CapsLock] and [Control]
 ;;
 ;; 2) KeyRemap4MacBook:
 ;;    - Map [Option_R] to [Control_R] (only in Emacs, Terminal, X11)
 ;;    Note: This KeyRemap4MacBook no need anymore because I can remap
 ;;          option to control using mac-option-modifier below ...
 ;;
 ;; 3) Then below:
 ;;
 ;;    See https://emacsformacosx.com/tips
 ;;    Here's variables controlling the modifier keys:
 ;;
 ;;    - ns-alternate-modifier
 ;;    - ns-command-modifier
 ;;    - ns-control-modifier
 ;;    - ns-function-modifier
 ;;    - ns-option-modifier (just a different name for ns-alternate-modifier)
 ;;    - ns-right-alternate-modifier
 ;;    - ns-right-command-modifier
 ;;    - ns-right-control-modifier
 ;;    - ns-right-option-modifier
 ;;
 ;;    Each variable can be set to 'control, 'meta, 'alt, 'super, or 'hyper.
 ;;
 ;;    In addition ns-alternative-modifier (and ns-option-modifier) can be set to 'none,
 ;;    which lets it get interpreted by the OS so it can be used to input special
 ;;    characters.
 ;;
 ;;    The ns-right-* variables are set to 'left by default which makes them the same as
 ;;    their left counterpart.
 (setq mac-command-modifier      'meta      ; [Command] behaves like [Meta]
       mac-option-modifier       'control   ; [Option]  behaves like [Control]
       mac-right-option-modifier 'control)))

(setq-default frame-title-format (list (system-name) ":" "%f"))

;; add to config.el
(when-let (dims (doom-store-get 'last-frame-size))
  (cl-destructuring-bind ((left . top) width height fullscreen) dims
    (setq initial-frame-alist
          (append initial-frame-alist
                  `((left . ,left)
                    (top . ,top)
                    (width . ,width)
                    (height . ,height)
                    (fullscreen . ,fullscreen))))))

(defun save-frame-dimensions ()
  (doom-store-put 'last-frame-size
                  (list (frame-position)
                        (frame-width)
                        (frame-height)
                        (frame-parameter nil 'fullscreen))))

(add-hook 'kill-emacs-hook #'save-frame-dimensions)

(setq-default doom-scratch-dir (format "%s/private" (getenv "DOOMDIR"))
              doom-scratch-initial-major-mode 'text-mode)

(let
    ;; for light background
    ((alternatives '("swan-5165109-500.svg" "doom-emacs-bw-light.svg")))
    ;; for dark background
    ;; ((alternatives '("swan-5165109-500.svg" "doom-emacs-bw-light.svg")))
  (setq fancy-splash-image
        (concat doom-private-dir "splash/"
                (nth (random (length alternatives)) alternatives))))

;; if you don't need widget function, you can remove-hook it
;; see +doom-dashboard-functions at modules/ui/doom-dashboard/config.el
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-loaded)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

(defvar quotes
  '("There are approximately 100,000 hairs on average human head"
    "At any given moment, about 0.7% of the people in the world are drunk"
    "Shift your focus from the past to the future"
    "It takes an average person 7 minutes to fall asleep"
    "The limits of my language means the limits of my world"
    "There are only 2 hard things in coding: cache invalidation and naming things"
    "If you can't explain it simply, you don't understand it well enough"
    "The world is changed by examples, not by opinions"
    "An excessive knowledge of Marxism is a sign of a misspent youth"
    "Give a man a fish, you feed him for a day. Teach a man to fish, you feed him for a lifetime"
    "The tools we use have a profound influence on our thinking habits, and, on our thinking abilities"
    "Your text editor reveals about your personality"
    "When you talk, you spray around 2.5 microscopic saliva droplets per word"
    "An apple in the morning will keep you more awake than a cup of coffee"
    "You miss 100% of the shots you never take"
    "To the man who only has a hammer, everything he encounters begins to look like a nail"
    "Good days give you happiness and bad days give you experience"
    "We are what we repeatedly do; excellence, then, is not an act but a habit"
    "A wise man gets more use from his enemies than a fool from his friends"
    "Our brains actually don't mind hard work, we just don't love the idea of it"
    "Success is how high you bounce after you hit bottom"
    "Think rationally, talk emotionally"
    "I’d rather live with a good question than a bad answer"
    "Imitation is suicide"
    "Do what you must, and your friends will adjust"
    "I wish I was an octopus, so I can slap eight people at once"
    "Doing nothing is hard, you never know when you're done"
    "When nothing is going right, go left"
    "After (M)onday and (T)uesday comes WTF!"
    "I could agree with you, but then we'd both be wrong"
    "I hear and I forget, I see and I remember. I do and I understand"
    "I might fall down but that does not mean I'll stay there"
    "Every accomplishment starts with the decision to try"
    "Rule#1: There's always a dame"
    "Rule#2: Someone always gets hurt"
    "Rule#3: Reality is stranger than fiction"
    "Love is like war, easy to begin but hard to end"
    "There are no straight lines in nature"
    "Opportunity does not knock, it presents itself when you beat down the door"
    "A diamond is merely a lump of coal that did well under pressure"
    "Action speaks louder than words"
    "Design for the future, because it will be here sooner than you think"
    "Ninety nine failed solutions equals a gain of 99 pieces of information"
    "Repair what you can but when you must fail, fail noisily and as soon as possible"
    "Too much agrement kills a chat"
    "Don't talk about yourself; it will be done when you leave"
    "Your best teacher is your last mistake"
    "A smile can mean a thousand words, but it can also hide a thousand problems"
    "Laziness is nothing more than the habit of resting before you get tired"
    "When we talk to God, we're praying. When God talks to us, we're schizophrenic"
    "Smile and let everyone know that today, your're a lot stronger than yesterday"
    "Look at the order in which you do things"
    "A line has two sides"
    "In the Beginning ... Was the command Line"
    "Life is 10% what happens to you and 90% how you react to it"
    "The secret of getting ahead is getting started"
    "Once you eliminate your number one problem, You promote number two"
    "Clarity is better than cleverness"
    "How beautiful it is to find someone who asks for nothing but your company"
    "When in doubt, use brute force"
    "Teachers open the door. You enter by yourself"
    "Rome was not built in a day, neither in a thousand years"
    "Never trust a man when he's in love, drunk, or running for office"
    "User: the word computer professionals use when they mean 'idiot'"
    "Don't wish it were easier, wish you were better"
    "Remind yourself that 'done' is better than perfect"
    "Don't look back. You are not going that way"
    "Nothing lasts forever but at least we got these memories"
    "Don't tell people your plans. Show them your results."
    "In a room full of software architects, if two agree on the same thing, that's a majority"
    "Time moves in one direction, memory in another"
    "If you automate a mess, you get an automated mess"
    "Don't document the problem, fix it"
    "If the code and the comments do not match, possibly both are incorrect"
    "I think it's a new feature. Don't tell anyone it was an accident"
    "When debugging, novices insert corrective code; experts remove defective code"
    "Like glass, it's better to leave them broken than to hurt yourself putting it back together"
    "Adding manpower to a late software project makes it later!"
    "Better train people and risk they leave - than do nothing and risk they stay"
    "Good judgment comes from experience, and experience comes from bad judgment"
    "Don't comment bad code - rewrite it"
    "It's not a bug - it's an undocumented feature"
    "The jump always feels scary, and often, the landing is amazing"
    "Take your time. Recharge and come back stronger"
    "Copy and paste is a design error"))

(defun ttk/quotes ()
 (insert
  "\n"
  (propertize
   (+doom-dashboard--center
    +doom-dashboard--width
    (nth (random (length quotes)) quotes))
   'face 'doom-dashboard-loaded))
 "\n")

;; (setq mybanner (pop +doom-dashboard-functions))
;; (add-to-list '+doom-dashboard-functions 'ttk/quotes)
;; (add-to-list '+doom-dashboard-functions mybanner)

;; append it to the last
(add-to-list '+doom-dashboard-functions 'ttk/quotes t)

(cond
 (IS-IGD1943U
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-IGL7568W
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-VDI1039
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (IS-IGD0464U
  (setq doom-font                (font-spec :family "Input Mono Condensed" :size 12)
        doom-variable-pitch-font (font-spec :family "Input Mono Condensed" :size 12)
        doom-big-font            (font-spec :family "Input Mono Condensed" :size 18)))
 (IS-HORUS
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 20)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 20)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 24)))
 (IS-REX
  (setq doom-font                (font-spec :family "Ubuntu Mono" :size 24)
        doom-variable-pitch-font (font-spec :family "Ubuntu Mono" :size 24)
        doom-big-font            (font-spec :family "Ubuntu Mono" :size 32)))
 (IS-HAMM
  (setq doom-font                (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-variable-pitch-font (font-spec :family "Iosevka Fixed SS04 MdEx" :size 12)
        doom-big-font            (font-spec :family "Iosevka Fixed SS04 MdEx" :size 18)))
 (t
  (setq doom-font                (font-spec :family "monospace" :size 20)
        doom-variable-pitch-font (font-spec :family "monospace" :size 20)
        doom-big-font            (font-spec :family "monospace" :size 24))))

(when (modulep! :ui doom)
  (setq doom-themes-enable-bold t      ; if nil, bold i universally disabled
      doom-themes-enable-italic t      ; if nil, italics is universally disabled
  )
  ;; select theme
  (cond
   (IS-IGD0464U
    (setq doom-theme 'ttk-doom-solarized-light))
   (IS-IGL7568W
    (setq doom-theme 'ttk-doom-one-light))
   (IS-VDI1039
    (setq doom-theme 'ttk-doom-one-light))
   (IS-IGD1943U
    (setq doom-theme 'ttk-doom-one-light))
   (IS-HORUS
    (setq doom-theme 'ttk-doom-one-light))
   ((or IS-REX IS-HAMM)
    (setq doom-theme 'ttk-doom-one-light))
   (t
    (setq doom-theme 'ttk-doom-zenburn)))
  ;; corrects (and improves) org-mode's native fontification
  (doom-themes-org-config))

;; ref: https://github.com/bbatsov/solarized-emacs
;; if you are using emacs under X you might like the following setting which puts
;; the underline below the font bottomline instead of the baseline.
(if (display-graphic-p)
  (progn
   ;; in graphics mode
   (setq x-underline-at-descent-line t))
  ;; else in terminal
  ;; do nothing
  )
;; get the right time to set face of hl-line is a bit tricky
;; each theme has its own way to set and clear
;; hence, call this function after switching to a theme
(defun ttk/hl-line-underline-on ()
  "Enable hl-line underline"
  (interactive)
  (set-face-background 'hl-line nil)
  (set-face-foreground 'hl-line nil)
  (set-face-underline 'hl-line t)
  ;; change cursor's color
  (setq evil-normal-state-cursor '(box "tomato")
        evil-insert-state-cursor '(bar "medium sea green")
        evil-visual-state-cursor '(hollow "orange")))
;;(ttk/hl-line-underline-on)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type 'relative)  ; relative line number
(setq display-line-numbers-type t)      ; absolute line number

(map! :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)

(use-package! pulsing-cursor
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
  (setq pulsing-cursor-delay 1.0        ; 1.0 sec
        pulsing-cursor-interval 1.5     ; 1.5 sec
        pulsing-cursor-blinks 10        ; how many blinks before become solid
   )
 ;; (pulsing-cursor-mode +1)               ; enable on start
 (pulsing-cursor-mode -1)               ; disable on start
  )

(when (modulep! :tools rgb)
  (add-hook! 'rainbow-mode-hook
             (hl-line-mode (if rainbow-mode -1 +1))))

;;
;; balanced and colorful delimiters
;;     https://github.com/Fanael/rainbow-delimiters.git
;;
;; Toggle single buffer: M-x rainbow-delimiters-mode
(use-package! rainbow-delimiters
 ;; if you omit :defer, :hook, :commands, or :after, then the package is loaded
 ;; immediately. By using :hook here, the `rainblow-delimiters` package won't be loaded
 ;; until prog-mode-hook is triggered (by activating a major mode derived from
 ;; it, e.g. python-mode)
 :hook (prog-mode . rainbow-delimiters-mode)
 :init
 ;; code here will run immediately
 :config
 ;; code here will run after the package is loaded
)

(use-package! doom-modeline
 :init
 (setq doom-modeline-percent-position nil ; dunwan buffer % at segment buffer-position
       doom-modeline-project-detection 'projectile ; how to detect project root
       ;; doom-modeline-project-detection 'project ; how to detect project root
       doom-modeline-buffer-file-name-style 'buffer-name ; uniquify buffer name
       doom-modeline-workspace-name nil                  ; need eyebrowse
       doom-modeline-persp-name t                        ; workspace using persp-mode
       doom-modeline-display-default-persp-name t        ; workspace using persp-mode
       doom-modeline-persp-icon nil                      ; workspace using persp-mode
       doom-modeline-lsp nil                             ; no need display lsp state
       ;; Whether display the environment version
       doom-modeline-env-version nil
       ;; Or for individual languages
       doom-modeline-env-enable-python t
       doom-modeline-env-enable-ruby t
       doom-modeline-env-enable-perl t
       doom-modeline-env-enable-go t
       doom-modeline-env-enable-elixir t
       doom-modeline-env-enable-rust t
   )
 :config
  ;; See list of doom-modeline-def-segment in doom-modeline-segments.el
  (doom-modeline-def-modeline 'ttk/my-simple-line
   '(bar vcs persp-name buffer-info-simple major-mode minor-modes buffer-position)
   '(selection-info misc-info))
  ;; Add to `doom-modeline-mode-hook` or other hooks
  (defun setup-custom-doom-modeline ()
   (doom-modeline-set-modeline 'ttk/my-simple-line t))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)
)

;;
;; which-function-mode
;;
(if t
    (which-function-mode 1) ; enable for all modes
  (progn                    ; enable for certain modes
    (require 'which-func)
    (eval-after-load "which-func-modes"
     '(setq which-func-modes '(c-mode cc-mode c++-mode java-mode org-mode python-mode)))
    (which-func-mode 1)))

(setq-default
 ;; %H is the hour on a 24-hour clock
 ;; %I is on a 12-hour clock
 ;; %k is like %H only blank-padded
 ;; %l is like %I blank-padded.
 ;; %M is the minute
 ;; %S is the second
 display-time-default-load-average nil
 ;; display-time-format "%p%I:%M"
 display-time-format "%H:%M"
 display-time-interval 60               ; update every 60 sec
 display-time-default-load-average nil  ; don't show load average
 )
 ;; display clock in modeline
 (display-time-mode t)

;; shrink-whitespace.el
;;     https://github.com/jcpetkovich/shrink-whitespace.el.git
;;
;; delete blank lines and shrink whitespace
(use-package! shrink-whitespace
 :defer t
 :bind (("M-\\" . shrink-whitespace)))

(map! :leader
      (:prefix-map ("r" . "register")
       "SPC" #'point-to-register
       "l" #'list-registers
       "i" #'insert-register
       "j" #'jump-to-register
       "s" #'copy-to-register))

(after! undo-fu
 (remove-hook 'undo-fu-mode-hook #'global-undo-fu-session-mode))

(after! smartparens
  (defun zz/goto-match-paren (arg)
    "Go to the matching paren/bracket, otherwise (or if ARG is not
    nil) insert %.  vi style of % jumping to matching brace."
    (interactive "p")
    (if (not (memq last-command '(set-mark
                                  cua-set-mark
                                  zz/goto-match-paren
                                  down-list
                                  up-list
                                  end-of-defun
                                  beginning-of-defun
                                  backward-sexp
                                  forward-sexp
                                  backward-up-list
                                  forward-paragraph
                                  backward-paragraph
                                  end-of-buffer
                                  beginning-of-buffer
                                  backward-word
                                  forward-word
                                  mwheel-scroll
                                  backward-word
                                  forward-word
                                  mouse-start-secondary
                                  mouse-yank-secondary
                                  mouse-secondary-save-then-kill
                                  move-end-of-line
                                  move-beginning-of-line
                                  backward-char
                                  forward-char
                                  scroll-up
                                  scroll-down
                                  scroll-left
                                  scroll-right
                                  mouse-set-point
                                  next-buffer
                                  previous-buffer
                                  previous-line
                                  next-line
                                  back-to-indentation
                                  doom/backward-to-bol-or-indent
                                  doom/forward-to-last-non-comment-or-eol
                                  )))
        (self-insert-command (or arg 1))
      (cond ((looking-at "\\s\(") (sp-forward-sexp) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (sp-backward-sexp))
            (t (self-insert-command (or arg 1))))))
  (map! "%" 'zz/goto-match-paren))

(setenv "GPG_AGENT_INFO" nil)

(setq auth-sources '((:source "~/.authinfo.gpg")) ; can have multiple sources
      auth-source-cache-expiry nil                ; default is 7200 (2h)
      auth-source-debug t)

(when (modulep! :editor evil)
  (setq-default
    ;; i don't like the o/O keys will respect and continue commented lines, so disable it.
    +evil-want-o/O-to-continue-comments nil
    ;; if t then these will make cursor follow the new splitted window
    evil-split-window-below nil     ; t: follow new splitted window, nil: remain
    evil-vsplit-window-below nil    ; t: follow new splitted window, nil: remain
    ;; let's mimic the original vim behavior and don't make mistakes
    evil-want-fine-undo t
  )
  ;;
  (after! evil
    (setq evil-move-cursor-back t       ; default: move the block cursor when toggling insert mode
          evil-kill-on-visual-paste nil ; don't put overwritten text in the kill ring
          )))

(after! evil-mc
  (add-to-list 'evil-mc-incompatible-minor-modes 'lispy-mode)
  (add-to-list 'evil-mc-incompatible-minor-modes 'yas-minor-mode))

(defhydra my-mc-hydra (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(map!
 (:when (modulep! :editor multiple-cursors)
  :prefix "g"
  :nv "z" #'my-mc-hydra/body))

(after! (:and evil-mc smartparens)
  (dolist (sp-command '(sp-up-sexp
                        sp-copy-sexp
                        sp-down-sexp
                        sp-join-sexp
                        sp-kill-sexp
                        sp-next-sexp
                        sp-split-sexp
                        sp-wrap-curly
                        sp-wrap-round
                        sp-raise-sexp
                        sp-clone-sexp
                        sp-wrap-square
                        sp-splice-sexp
                        sp-end-of-sexp
                        sp-forward-sexp
                        sp-backward-sexp
                        sp-convolute-sexp
                        sp-transpose-sexp
                        sp-kill-whole-line
                        sp-beginning-of-sexp
                        sp-forward-barf-sexp
                        sp-forward-slurp-sexp
                        sp-backward-barf-sexp
                        sp-backward-slurp-sexp
                        sp-splice-sexp-killing-forward
                        sp-splice-sexp-killing-backward))
    (add-to-list
     'evil-mc-custom-known-commands
     `(,sp-command
       (:default . evil-mc-execute-call)))))

(use-package! evil-motion-trainer
  :init
  :config
  (setq evil-motion-trainer-threshold 6
        evil-motion-trainer-super-annoying-mode nil)
  ;; (global-evil-motion-trainer-mode 1)    ; enable
  (global-evil-motion-trainer-mode 0)       ; disable
 )

;; see ~/.emacs.d/modules/editor/evil/config.el
(map! :after evil-easymotion
  :map evilem-map
   "l" #'evil-avy-goto-line
;; "p" #'avy-pop-mark  ; better-jumper-jump-backword (C-o) as general jump backward
)

(after! avy
  (defun avy-action-kill-whole-line (pt)
  (save-excursion
      (goto-char pt)
      (kill-whole-line))
  (select-window
  (cdr
      (ring-ref avy-ring 0)))
  t)
  ;;
  (setf (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
        ; (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay     ;; doom default ?X
        )
 )

(after! avy
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
          (bounds-of-thing-at-point 'line)
        (copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)
  ;;
  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)
  ;;
  (setf ; (alist-get ?y avy-dispatch-alist) 'avy-action-yank             ; doom default ?y
        ; (alist-get ?w avy-dispatch-alist) 'avy-action-copy             ; doom default ?n
        (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line  ; override doom yang-line (?Y)
        )
 )

(lambda()
  (setq-local completion-category-defaults
              (assoc-delete-all 'lsp-capf completion-category-defaults)))

(setq org-directory "~/org/")

(after! org (setq org-hide-emphasis-markers t))

(after! org (setq org-insert-heading-respect-content nil))

(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))

(after! org
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t))

(after! org
  (setq org-use-speed-commands
        (lambda ()
          (and (looking-at org-outline-regexp)
               (looking-back "^\**")))))

(add-hook! org-mode (electric-indent-local-mode -1))

(after! org (setq org-startup-folded 'fold))

(after! org
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "WIP(i)" "|" "DONE(d)" "CANCEL(c)")))))

(add-hook! org-mode :append
           #'visual-line-mode)

(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t
        org-appear-autokeywords t))

(use-package! ox-awesomecv
  :after org)

(defun ttk/org-export-to-file-awesomecv-tex ()
  (interactive)
  (let ((outfile (org-export-output-file-name ".tex")))
    (org-export-to-file 'awesomecv outfile)))

(after! org-tree-slide
  ;; h-bauer 25-june-2021: When arriving on a subsection, the narrow did not occur as expected.
  ;; The first sub-section was unfolded, the next two where still visible. I could not go further
  ;; with the binding, unless moving the cursor to the next sibling. would then unfold the
  ;; next sibling, but to move to the next section with, I had to move the cursor to the
  ;; last line of the last sub-section.
  ;; After some investigation, I fixed my issue by removing the following advice :
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--hide-first-heading-maybe-a)
  ;; display inline image
  (add-hook 'org-tree-slide-mode-after-narrow-hook
            #'org-display-inline-images)
  ;; this is my own profile
  (defun ttk/org-tree-slide-simple-presentation-profile ()
    (interactive)
    (setq org-tree-slide-header nil
          org-tree-slide-slide-in-effect t))
 )

(use-package! anki-editor
  :after org-noter
  :config
  (setq anki-editor-create-decks t ; Allow anki-editor to create a new deck if it does not exist
        anki-editor-org-tags-as-anki-tags t
   ))

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
   ;; i want nil by default, then set #+auto_tangle: t in each org file
   (setq org-auto-tangle-default nil
    ))

(when (modulep! :editor file-templates)
  ;;
  ;; Ref: http://www.hoowl.se/auto_inserting_gitignore_templates_in_emacs.html
  ;;
  ;; .gitignore templates
  ;; $ mkdir ~/dotdoomemacs/templates
  ;; $ cd ~/dotdoomemacs/templates
  ;; $ git clone https://github.com/github/gitignore
  (defun ttk/template-insert-gitignore()
    (interactive)
    (let* ((dir (concat doom-private-dir "/templates/gitignore/"))
           (files (directory-files dir nil ".*\\.gitignore"))
           (pick (yas-choose-value (mapcar #'file-name-sans-extension files))))
      (insert-file-contents (concat dir (concat pick ".gitignore")))))
  ;; register the template
  (set-file-template! "\\.gitignore$" :trigger 'hanno/template-insert-gitignore :mode 'gitignore-mode)
  ;;
  ;; python templates
  (defun ttk/template-insert-python()
    (interactive)
    (let* ((dir (concat doom-private-dir "/templates/python/"))
           (files (directory-files dir nil ".*\\.py"))
           (pick (yas-choose-value (mapcar #'file-name-sans-extension files))))
      (insert-file-contents (concat dir (concat pick ".py")))))
  ;; register the template
  (set-file-template! "\\.py$" :trigger 'ttk/template-insert-python :mode 'python-mode))

(after! cc-mode
  (defconst ttk-c-style
   '(;; gnu        : coding style blessed by FSF for C code in  GNU programs
     ;; stroustrup : the classic Stroustrup style for C++ code.
     ;; linux      : C coding standard for Linux (the kernel).
     ;; user       : special style created by you. It consists of the factory defaults for
     ;;              all the style variables as modified by the customizations.
     (setq c-default-style '((java-mode . "java")
                             (awk-mode  . "awk")
                             (c-mode    . "user")
                             (c++-mode  . "user")
                             (other     . "user")))
     ;; this is for linux kernel and driver project
     (c-set-style (if (and (buffer-file-name) (string-match "~/project/linux" (buffer-file-name)))
                      "linux"
                    "user"))
     (c-hanging-braces-alist     . ((substatement-open after)
                                    (brace-list-open)))
     (c-hanging-colons-alist     . ((member-init-intro before)
                                    (inher-intro)
                                    (case-label after)
                                    (label after)
                                    (access-label after)))
     (c-cleanup-list             . (scope-operator
                                    empty-defun-braces
                                    defun-close-semi))
     (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                    (substatement-open . 0) ; brackets shd be at same identation as the statement they open
                                    (case-label        . 4) ;; 0 ;; 3
                                    (block-open        . 0)
                                    (knr-argdecl-intro . -)))
     (setq-default indent-tabs-mode             nil ; nil uses space, t uses tab. See: https://www.emacswiki.org/emacs/NoTabs
                   tab-width                      4 ; this is only for displaying existing tabs in files
                   c-basic-offset                 4
                   c-indent-level                 4 ; a tab is equivalent to four spaces
                   c-indent-tabs-mode             t ; pressing TAB should cause indentation
                   c-tab-always-indent            t
                   c-comment-only-line-offset     0 ; 4
                   c-continued-statement-offset   4 ; if a statement continues on the next line, indent the continuation by 4
                   c-echo-syntactic-information-p t)
     ) "TTK C Programming Style")
   ;;
   ;; Customizations for all of modes in CC mode
   ;;
   ;; ct hook
   (defun ct-c-mode-common-hook ()
    ;; add ct style and set it for the current buffer
    (c-add-style "TTK" ttk-c-style t)
    ;;
    ;; offset customizations not in ttk-c-style
    ;;
    (c-set-offset 'member-init-intro '++)
    (modify-syntax-entry ?_ "w")   ;; treat '_' as a word constituent
    ;; local binding
    ;; (local-set-key (kbd "C-<") 'c-up-conditional-with-else)
    ;; (local-set-key (kbd "C->") '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count))))
    ;; keybindings for all supported languages.  We can put these in
    ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
    ;; java-mode-map, and idl-mode-map inherit from it.
    ;; (define-key c-mode-base-map "\C-m" 'newline-and-indent)
    )
   ;;
   ;; apply which one to use
   (add-hook 'c-mode-common-hook 'ct-c-mode-common-hook)
   (add-hook 'c++-mode-common-hook 'ct-c-mode-common-hook)
   ;; files *.ipp is c++ source code in UPA
   (setq auto-mode-alist (cons '("\\.ipp$" . c++-mode) auto-mode-alist))
   (setq auto-mode-alist (cons '("\\.[ch].test$" . c-mode) auto-mode-alist))
   ;; this is to override "doom" as c-default-style
   (when (listp c-default-style)
     (setf (alist-get 'c-mode c-default-style) "user")
     (setf (alist-get 'c++-mode c-default-style) "user")
     (setf (alist-get 'other c-default-style) "user"))
  )

(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("d" . "C Movement")    ;; "c" already taken by ccls-show-caller: modules/lang/cc/config.el
       :desc "ccmode Movement"
        "<" 'c-up-conditional-with-else
        ">" '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count)))
        "A" 'c-beginning-of-defun
        "E" 'c-end-of-defun
        "a" 'c-beginning-of-statement
        "e" 'c-end-of-statement)

(use-package! xcscope
  :after prog-mode
  :init
  (setq cscope-do-not-update-database t
        cscope-edit-single-match nil)
  :config
  ;; let cscope minor modes key binding takes priority over evil key bindings
  (evil-make-overriding-map cscope-list-entry-keymap 'normal)
  ;; force update evil keymaps after cscope-list-entry-mode loaded
  (add-hook 'cscope-list-entry-hook #'evil-normalize-keymaps))

(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("s" . "cscope")
       :desc "cscope"
        "s" #'cscope-find-this-symbol
        "d" #'cscope-find-global-definition
        "c" #'cscope-find-functions-calling-this-function
        "C" #'cscope-find-called-functions
        "i" #'cscope-find-files-including-file
        "b" #'cscope-display-buffer
        "o" #'cscope-pop-mark
        "a" #'cscope-set-initial-directory
        "A" #'cscope-unset-initial-directory)

(after! xcscope
  ;; *cscope* buffer at bottom and get focus automatically
  (set-popup-rule! "^*cscope*$" :side 'bottom :select t :ttl nil))

(use-package! citre
  :init
  ;; code here will run immediately
  ;; this is needed in :init block for lazy load to work
  (require 'citre-config)
  :config
  ;; code here will run after the package is loaded
  (setq
   ;;;;; set these if readtags/ctags is not in your PATH
   ;; citre-readtags-program "/usr/bin/readtags"
   ;; citre-ctags-program "/usr/bin/ctags"
   ;;;;; set these if gtags/global is not in your PATH and you want
   ;;;;; to use global backend
   ;; citre-gtags-program "/usr/bin/gtags"
   ;; citre-global-program "/usr/bin/global"
   ;;;;; set this if you use project management plugin like projectile.
   ;;;;; it's use for things like displaying paths relatively, see it's doctring.
   citre-project-root-function #'projectile-project-root
   ;;;;; if you only want the auto enabling citre-mode behavior to work for
   ;;;;; certain mode (like `prog-mode'), set it like this:
   citre-auto-enable-citre-mode-modes '(prog-mode)
   ;;;;; set this if you'd like to use ctags options generated by citre
   ;;;;; directly, rather than further editing them
   citre-edit-ctags-options-manually nil
   ;;;;; yes, per project root
   citre-use-project-root-when-creating-tags t
   ;;;;; not sure below ,,, later check
   citre-tags-imenu-create-tags-file-threshold nil
   ;;;;; change order to be global the first
   citre-completion-backends '(global tags)
   citre-find-definition-backends '(global tags eglot)
   citre-find-reference-backends '(global eglot)
   citre-tags-in-buffer-backends '(global tags)
   ;;;;; use dashes
   citre-peek-use-dashes-as-horizontal-border t
  ))

(advice-add #'citre-jump :around #'doom-set-jump-a)

(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix ("c" . "citre")
       "s" #'citre-jump-to-reference
       "S" #'citre-query-jump-to-reference
       "d" #'citre-jump
       "D" #'citre-query-jump
       "o" #'citre-jump-back
 )

(after! magit
  (setq-default +magit-open-windows-in-direction 'down))

(use-package! blamer
  :bind
  :defer 20
  :custom
    (blamer-idle-time 1.0)
    (blamer-min-offset 70)
    (blamer-author-formatter "%s ")
    (blamer-datetime-formatter nil)     ; no need to show time
    (blamer-prettify-time-p nil)        ; no need show 2days ago/yesterday etc
    (blamer-type 'both)
    (blamer-uncommitted-changes-message "NOT COMMITTED")
    (blamer-max-lines 30) ; if > 30 lines selected, blamer will not execute git commands
    (blamer-max-commit-message-length 40) ; will be truncated if more than 40 chars
    (blamer-smart-background-p nil)       ; prefer not blamer face
    (blamer-border-lines nil)             ; borders will not present
    ;; (blamer-force-truncate-long-line nil) ; when truncate-lines mode is disabled you can
    (blamer-show-avatar-p nil)
    (blamer-enable-async-execution-p nil) ; this is the culprit. Must be nil !!!
  :config
    (global-blamer-mode 1))

(defun ttk-project-override (dir)
  (let ((override (locate-dominating-file dir ".project.el")))
    (if override
      (cons 'vc override)
      nil)))

(after! project
  (add-hook 'project-find-functions #'ttk-project-override))

(after! projectile
 ;; alien method need external utility (unixes), and fast.
 ;; it ignores the content of .projectile, but read .gitignore
 ;; totok 11-nov-2018: new method by default: turbo-alien
 (setq projectile-indexing-method 'alien) ; long live 'ripgrep'
 ;; native method is portable but slow. it reads the content of .projectile
 ;; (setq projectile-indexing-method 'native)
 (setq projectile-enable-caching t)
 ;; disable remote file exists cache
 ;;(setq projectile-file-exists-remote-cache-expire nil)
 (setq ;; enable remote file exists cache 10 minutes
   projectile-file-exists-remote-cache-expire (* 10 60)
   projectile-file-exists-local-cache-expire (* 10 60))
 ;; change default display on modeline (don't do it for spacemacs)
 ;;(setq projectile-mode-line '(:eval (format " P:%s" (projectile-project-name))))
 ;; (setq projectile-mode-line "Projectile")

 ;; (defadvice projectile-project-root (around ignore-remote first activate)
 ;;   (unless (file-remote-p default-directory) ad-do-it))

 ;;; by default, doom emacs use ivy (update 27-Jan-2022: now default is vertico)
 ;;; so, let follow default doom setting
 ;; (setq projectile-completion-system 'ivy) ; it's nice (from swiper package)
 ;;; tell projectile to not try and find the file on the remote SVN server and
 ;;; instead search locally, see https://github.com/bbatsov/projectile/issues/520
 (setq projectile-svn-command "find . -type f -not -iwholename '*.svn/*' -print0")
 ;; require presence of project root, otherwise current directory is the project root
 ;; other options: 'prompt or nil
 (setq projectile-require-project-root t)
 ;; don't want automatic project detection, ie i want manually a project
 ;; by a function called projectile-add-known-project, bound to "SPC p a"
 (setq projectile-track-known-projects-automatically nil)
 ;;
 ;; But doesn't work with indexing method alien nor turbo-alien
 ;; nvm, use rg to index and ignored directories put inside .rgignore
 (with-eval-after-load 'projectile
   ;; 29-Oct-2023. Find out that there is a sequence on how projectile search
   ;; a project root. https://docs.projectile.mx/projectile/projects.html#customizing-project-detection
   ;; So, for my case just add a file '.projectile' at my project root folder is sufficient because
   ;; ".repo" does not seem to be priority than ".git" for example
   (add-to-list 'projectile-project-root-files-bottom-up ".repo")
   ;; ignored directories
   (add-to-list 'projectile-globally-ignored-directories "tests")
   (add-to-list 'projectile-globally-ignored-directories ".repo")
   (add-to-list 'projectile-globally-ignored-directories ".venv")
   ;; ignored files
   (add-to-list 'projectile-globally-ignored-file-suffixes ".d")
   (add-to-list 'projectile-globally-ignored-file-suffixes ".o")
   ;; somehow
   (setq projectile-project-root-files (delete "setup.py" projectile-project-root-files))
   (setq projectile-project-root-files (delete "requirements.txt" projectile-project-root-files))
   )
 ;;
 ;; Use ripgrep to index files to be used by projectile
 ;; See: https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile/16499
 ;;
 ;; Default rg arguments
 ;; https://github.com/BurntSushi/ripgrep
 ;;
 ;; totok 20240309 remove folow symlink for avic3, due to symline oe-logs/ and oe-works/
 ;;      "--follow"                          ; follow symlinks

 (when (executable-find "rg")
   (message "Projectile use rg to generate project files.")
   (progn
     (defconst ttk/rg-arguments
       `("--line-number"                     ; line numbers
         "--smart-case"
         "--mmap")                           ; apply memory map optimization when possible
       "Default rg arguments used in the functions in `projectile' package.")
     ;;
     (defun ttk/advice-projectile-use-rg (&rest _args)
       "Always use `rg' for getting a list of all files in the project."
       (let* ((prj-user-ignore-name (expand-file-name
                                     (concat ".ignore." user-login-name)
                                     (projectile-project-root)))
              (prj-user-ignore (when (file-exists-p prj-user-ignore-name)
                                 (concat "--ignore-file " prj-user-ignore-name))))
         (mapconcat #'shell-quote-argument
                    (if prj-user-ignore
                        (append '("rg")
                                ttk/rg-arguments
                                `(,prj-user-ignore)
                                '("--null" ;Output null separated results
                                  ;; Get names of all the to-be-searched files,
                                  ;; same as the "-g ''" argument in ag.
                                  "--files"))
                      (append '("rg")
                              ttk/rg-arguments
                              '("--null"
                                "--files")))
                    " ")))
     (advice-add 'projectile-get-ext-command :override #'ttk/advice-projectile-use-rg)))
)

(defun ttk/projectile-extra-tidy-projects ()
  (interactive)
  (let ((missing-dirs (seq-remove 'file-directory-p projectile-known-projects)))
    (seq-do 'projectile-remove-known-project missing-dirs)
    (message "Tidied %d projects" (length missing-dirs))))

(use-package! bookmark-in-project
  :init
  ;; code here will run immediately
  :config
  ;; code here will run after the package is loaded
)

(map! :leader
      :desc "bookmark-in-project-jump"
      :g "SPC" nil                      ; firstly, unbind default doom binding
      (:nv "SPC" #'bookmark-in-project-jump))

;;
;; TRAMP
;;
;; SSH WITH PUBLIC KEY
;; 1. Add to ~/.ssh/config
;;        Host myhost
;;             Hostname myhost.abc.com
;;             ... <as usual>
;;             IdentityFile ~/.ssh/id_rsa_yours_blah
;; 2. $ eval $(ssh-agent -s)
;; 3. $ ssh-add ~/.ssh/id_rsa_blah
;; 4. From emacs:
;;        C-x C-f /ssh:yourusername@myhost:~/somefile.txt
;;
;; Common cause of tramp access to remote ssh timeout is that remote host has
;; an unconventional prompt (which tramp can't parse).
;; To fix, in your shell config on the remote machine:
;;
;;     if [[ "$TERM" == "dumb" ]];; then
;;       unset zle_bracketed_paste
;;       unset zle
;;       PS1='$ '
;;       return
;;     fi
;;
(after! tramp
 (tramp-set-completion-function "ssh"
                                '((tramp-parse-sconfig "/etc/ssh_config")
                                  (tramp-parse-sconfig "/etc/ssh/ssh_config")
                                  (tramp-parse-sconfig "~/.ssh/config")))
 (setq tramp-default-method "ssh")
 (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
 ;; Only for debugging slow tramp connections
 ;; (setq tramp-verbose 7)
 ;;
 ;; Skip version control for tramp files
 (setq vc-ignore-dir-regexp
       (format "\\(%s\\)\\|\\(%s\\)"
               vc-ignore-dir-regexp
               tramp-file-name-regexp))
 ;; Turn off auto-save for tramp files
 (add-to-list 'backup-directory-alist
              (cons tramp-file-name-regexp nil))
 ;; Use ControlPath from .ssh/config
 (setq tramp-ssh-controlmaster-options "")
 ;; Disable ssh password cache expiration
 (setq password-cache-expiry nil)
 ;; When autosave kickec in, save here ...
 (setq tramp-auto-save-directory "~/tmp/tramp/")
 ;; Let's see this chunksize value
 (setq tramp-chunksize 2000))

;; see doom-emacs/modules/lang/plantuml/packages.el
(use-package! plantuml-mode
  :init
  (setq plantuml-jar-path (format "%s/plantuml/plantuml-1.2024.7.jar" (getenv "DOOMDIR"))
        org-plantuml-jar-path (format "%s/plantuml/plantuml-1.2024.7.jar" (getenv "DOOMDIR"))
        plantuml-indent-level 3
        ;; See: https://github.com/skuro/plantuml-mode/issues/46
        ;; we can save *PLANTUML Preview* buffer to a file with command:
        ;; - C-c C-c  (Turning the display mode to text)
        ;; - SPC f s  (M-x save-buffer)
        ;; - Keyin filename
        ;; Supported format: "svg", "png", "txt" (ascii art)
        plantuml-output-type "svg")
  :config
  (setq plantuml-default-exec-mode 'jar))
  ;; enable plantuml-mode for PlantUML files
  (setq auto-mode-alist (cons '("\\.plantuml$"     . plantuml-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.[uU][mM][lL]$" . plantuml-mode) auto-mode-alist))

(use-package! graphviz-dot-mode)

(after! treemacs
  (setq treemacs-width 20
        ;; switch to treemacs with keyboard: https://github.com/doomemacs/doomemacs/issues/1177
        treemacs-is-never-other-window nil)
  ;; enable follow mode
  (treemacs-follow-mode t))

(after! treemacs-projectile
  (treemacs-project-follow-mode t))

(after! lsp-treemacs
  (setq lsp-treemacs-theme "Iconless")  ; no need icon, confusing
  ;; (setq lsp-treemacs-theme "Eclipse")
  (lsp-treemacs-sync-mode 1))

(use-package! lsp
  :init
  ;;
  ;; For general LSP, you need :tools lsp
  ;;
  (setq ;;;;;;;;;;;;; Features/Core ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; lsp-auto-configure t            ; default: t
        ;; lsp-eldoc-hook nil              ; default: '(lsp-hover)
        ;; lsp-eldoc-enable-hover t        ; detault: t
        lsp-eldoc-enable-hover nil         ; default: t (too noisy, so do on demand with lsp-ui-doc-show)
        lsp-eldoc-render-all t             ; default: nil. This to show enum value
        lsp-enable-on-type-formatting t    ; default: t
        lsp-enable-symbol-highlighting nil ; default: t
        ;; http://blog.binchen.org/posts/how-to-speed-up-lsp-mode/
        lsp-log-io nil                     ; enable log only for debug
        lsp-enable-folding nil             ; use evil-matchit' instead
        ;; lsp-enable-links nil            ; use ffip instead
        lsp-idle-delay 5.0                 ; default: 0.5
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Completion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-completion-enable t            ; see how is performance
        ;lsp-completion-provider :ivy       ; long live ivy
        ;; lsp-completion-show-detail nil         ; completion item detail
        ;; lsp-completion-show-kind nil           ; completion item kind
        lsp-enable-snippet nil             ; handle yasnippet by myself
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Diagnostics ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-diagnostics-provider :none
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Headerline ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-headerline-breadcrumb-enable nil               ; headerline
        lsp-headerline-breadcrumb-enable-diagnostics nil
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Modeline ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-modeline-workspace-status-enable nil
        lsp-modeline-code-actions-enable nil     ; modeline code actions
        lsp-modeline-diagnostics-enable nil      ; modeline diagnostics statistics
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Lens ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-lens-enable nil             ; default: nil
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;; Features/Icons ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-headerline-breadcrumb-icons-enable nil
        ;;
        ;; well, how to make below works?
        ;;
        lsp-prefer-flymake nil          ; prefer lsp-ui (flycheck) over flymake
        ;;
        ;; lsp-navigation 'simple
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;;;;;;;;;;;;; Extensions/UI ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lsp-ui-doc-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-update-mode nil
        lsp-ui-peek-enable nil
        lsp-ui-peek-show-directory nil
        lsp-ui-flycheck-enable nil
        lsp-ui-flycheck-live-reporting nil
        lsp-ui-imenu-enable nil
        lsp-ui-doc-show-with-cursor nil  ; cursor hover
        lsp-ui-doc-show-with-mouse nil   ; mouse hover
        lsp-ui-doc-use-childframe nil    ; see how this
        lsp-ui-doc-include-signature nil ; see how this
        lsp-signature-auto-activate nil        ; manually: `lsp-signature-activate'
        lsp-signature-render-documentation nil ; signature help documentation
        ;;
        xref-prompt-for-identifier t           ; prompt if no identifier
   )
  ;;
  ;; For python, you need to add :lang (python +lsp)
  ;;
  (setq python-fill-column 149
        python-formatter 'yapf
        python-format-on-save nil
        python-sort-imports-on-save t
        python-pipenv-activate t
   )
)

(with-eval-after-load 'lsp-mode
 ;; VUC directories
 (dolist (dir '(
            "[/\\\\]\\.repo\\'"
            "[/\\\\]\\.venv\\'"
            "[/\\\\]\\tests\\'"
            "[/\\\\]\\err\\'"
            "[/\\\\]\\lst\\'"
            "[/\\\\]\\opt\\'"
            "[/\\\\]\\out\\'"
            "[/\\\\]\\tmp\\'"
            "[/\\\\]\\.cache\\'" ; clangd index
            "[/\\\\]\\.clangd\\'" ; clangd index
            "[/\\\\]\\.kwlp\\'"  ; klocwor
            "[/\\\\]\\.kwps\\'"  ; klocwor
            "[/\\\\]\\Application_PTF\\'"
            "[/\\\\]\\User_Config_PTF\\'"
            "[/\\\\]\\TVIP_Ctrl_Files\\'"
            "[/\\\\]\\WindRiver\\'"
            ))
  (push dir lsp-file-watch-ignored-directories)
  )
 ;; well disable first :)
 (setq lsp-enable-file-watchers nil)
)

(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=never"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))

(defun ttk/xref-display-buffer ()
 "Display the *xref* buffer."
 (interactive)
 (let ((buffer (get-buffer "*xref*")))
   (if buffer
     (pop-to-buffer buffer)
    (error "The *xref* buffer does not exist yet"))))

;; (after! xref
;;  (set-popup-rule! "^*xref*$" :side 'left :size 0.4 :select t :ttl nil))

(map! :after lsp
      :map (c-mode-map c++-mode-map python-mode-map)
      :localleader
      :g "l" nil                        ; firstly, unbind default doom binding
      :prefix ("l" . "ttk-lsp")         ; define our own
        :nv "d" #'xref-find-definitions
        ;; :nv "d" #'lsp-ui-peek-find-definitions
        :nv "D" #'lsp-ui-doc-show
        :nv "u" #'xref-pop-marker-stack
        ;; :nv "u" #'lsp-ui-peek-jump-backward
        :nv "c" #'lsp-treemacs-call-hierarchy
        :nv "s" #'lsp-find-references
        ;; :nv "s" #'lsp-ui-peek-find-references
        :nv "S" #'lsp-ui-find-workspace-symbol
        :nv "i" #'lsp-ui-sideline-toggle-symbols-info
        :nv "a" #'lsp-workspace-restart
        :nv "b" #'ttk/xref-display-buffer)

(after! company
  ;; Full list of company backends, see:
  ;; https://github.com/company-mode/company-mode/tree/master
 (setq company-backends '(company-capf          ; citre use this
                          company-keywords
                          ;; company-semantic   ; i don't use semantic
                          company-files
                          ;; company-etags      ; i use cscope
                          ;; company-elisp      ; no longer needed
                          company-clang
                          ;; company-irony-c-headers
                          ;; company-irony
                          ;; company-jedi
                          company-cmake
                          ;; company-ispell    ; i don't use ispell
                          company-yasnippet))
 (setq company-echo-delay 0
       company-minimum-prefix-length 3
       company-show-numbers t
       company-tooltip-limit 20
       company-dabbrev-downcase nil
       ;; adjust this idle delay so it does not interrupt
       ;; your flow while still allowing you to call it on demand
       company-idle-delay 0.5           ; unit is seconds
       company-require-match nil
   )
 ;; make aborting less annoying
 (add-hook 'evil-normal-state-entry-hook #'company-abort)

;;  ;; using digits to select company-mode candidates
;;  ;; https://oremacs.com/2017/12/27/company-numbers/
;;  ;; add some bindings
;;  (let ((map company-active-map))
;;    (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
;;    (number-sequence 0 9))
;;    (define-key map " " (lambda ()
;;                          (interactive)
;;                          (company-abort)
;;                          (self-insert-command 1)))
;;    (define-key map (kbd "<return>") nil)
;;    )
;;  ;; actual code
;;  (defun ora-company-number ()
;;   "Forward to `company-complete-number'.
;;
;; Unless the number is potentially part of the candidate.
;; In that case, insert the number."
;;   (interactive)
;;   (let* ((k (this-command-keys))
;;         (re (concat "^" company-prefix k)))
;;     (if (cl-find-if (lambda (s) (string-match re s))
;;                     company-candidates)
;;         (self-insert-command 1)
;;       (company-complete-number
;;       (if (equal k "0")
;;           10
;;         (string-to-number k))))))
;;   ;;
;;   ;; end of using digits to select company-mode candidates
;;   ;;
 )

(after! org
  ;; But I don't want to see line number in og mode
  (add-hook! 'org-mode-hook #'doom-disable-line-numbers-h)
  ;; disable auto-complete in org-mode buffers
  (remove-hook 'org-mode-hook #'auto-fill-mode)
  ;; disable company too
  (setq company-global-modes '(not org-mode)))

(setq world-clock-list
      '( ;  TZNAME             LABEL
        ("America/Mexico_City" "GDL  ") ; Guadalajara
        ("America/Chicago"     "DPK  ") ; Deer Park
        ("Etc/UTC"             "-UTC-")
        ("Europe/Berlin"       "FFM  ") ; Frankfurt
        ("Asia/Kolkata"        "BGL  ") ; Bangalore
        ("Asia/Singapore"      "SGP**") ; Singapore
        ("Asia/Chongqing"      "CHQ  ") ; Chongqing
        ("Asia/Tokyo"          "Tokyo")
        ("Asia/Seoul"          "Seoul")
        ))
;; Format of the display
(setq world-clock-time-format "%a %d-%b-%Y %p %I:%M %Z") ; default: "%A %d %B %R %Z"

(use-package! ts
  :init
  :config
   (defun ttk/world-clock ()
     (interactive)
     (with-temp-buffer
       (org-mode)
       (save-excursion
         (setq ots (org-timestamp ""))))
     (setq-local diff (ts-diff (ts-fill (ts-parse-org ots)) (make-ts :unix 0))) ;; seconds since 1970
     (setq value "")
     (dolist (timedata world-clock-list)
       (setq value (concat value
                           (nth 1 timedata) " "
                           (format-time-string
                            "%a %d-%b-%Y %p %I:%M %z"
                            diff (car timedata)) "\n")))
     ;; (insert value)                     ; insert into current buffer at current cursor position
     (display-message-or-buffer value)  ; shown in the echo area
     ))

(when (modulep! :lang json)
  (setq auto-mode-alist (cons '("\\.[jJ][sS][oO][nN]$" . json-mode) auto-mode-alist)))

(when (modulep! :lang cc)
  (setq auto-mode-alist (cons '("^[Cc][Mm][Aa][Kk][Ee][Ll][Ii][Ss][Tt][Ss].[Tt][Xx][Tt]$" . cmake-mode) auto-mode-alist)))

(setq auto-mode-alist (cons '("component.def"              .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("BuildEnv.opt"               .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("makefile_RH850_F1K_1_5MB"   .  makefile-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("windriver_RH850.opt"        .  makefile-mode) auto-mode-alist))

(map! :leader
      (:prefix-map ("=" . "calc")
       "=" #'calc-dispatch
       ;; some other shorcuts
       "c" #'calc                ; launch calc mode w/o doing anything clever
       "q" #'quick-calc          ; quick calculations in the minibuffer
       "g" #'calc-grab-region    ; grab a region w/o going through calc-dispatch
       "p" #'calc-copy-to-buffer ; same as SPC u p P
       ))

(map! :after calc
      :map calc-mode-map
       "C-o" #'casual-calc-tmenu        ; no need nv
      :map calc-alg-map
       "C-o" #'casual-calc-tmenu        ; no need nv
)

(map! :after dired
      :map dired-mode-map
      :nv "C-o" #'casual-dired-tmenu)   ; need nv

(when (modulep! :tools docker)
  (setq auto-mode-alist (cons '("Dockerfile\\$" . dockerfile-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("dockerfile" . dockerfile-mode) auto-mode-alist)))

;; insert date into buffer
;;
(defun ttk/insert-date ()
 "Insert date at point."
 (interactive)
 (insert (format-time-string "%a %e-%b-%Y %l:%M%p")))

(defun ttk/ascii-table()
  "Display basic ASCII table (0 thru 128)."
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (setq buffer-read-only nil)        ;; Not need to edit the content, just read mode (added)
  ;; (local-set-key "q" 'bury-buffer)   ;; Nice to have the option to bury the buffer (added)
  (save-excursion (let ((i -1))
    (insert "ASCII characters 0 thru 127.\n\n")
    (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
    (while (< i 31)
      (insert (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
                      (setq i (+ 1  i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)))
      (setq i (- i 96))))))

(defun ttk/arrayify (start end quote)
  "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
  (interactive "r\nMQuote: ")
  (let ((insertion
         (mapconcat
          (lambda (x) (format "%s%s%s" quote x quote))
          (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)))

(use-package! dwim-shell-command
  :init
  ;; code here will run immeidately
  :config
  ;; code here will run after the package is loaded
  (defun ttk/dwim-shell-command-convert-svg-to-png ()
    "Convert all marked svg files to png format"
    (interactive)
    (dwim-shell-command-on-marked-files
     "Convert to png"
     "rsvg-convert -b white <<f>> -f png -o <<fne>>.png"
     :utils "rsvg-convert"))
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command)))

;; For emacs-28.1 and above
(setq dired-kill-when-opening-new-dired-buffer t)

(map! (:map 'override
       :v "v" #'er/expand-region
       :v "V" #'er/contract-region))
